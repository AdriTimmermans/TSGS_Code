//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TSGS_CS_Login_Client.TSGS_CS_WCF_Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GamesData", Namespace="http://schemas.datacontract.org/2004/07/TSGS_CS_WCF_Service")]
    [System.SerializableAttribute()]
    public partial class GamesData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Competitie_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Id_WitspelerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Id_ZwartspelerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float Matchpoints_BlackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float Matchpoints_WhiteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberChampionsgroupGameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Pairing_Status_LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RondernrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SorteerwaardeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WedstrijdresultaatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WedstrijdtypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float Wit_RemiseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float Wit_VerliesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float Wit_WinstField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float Zwart_RemiseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float Zwart_VerliesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float Zwart_WinstField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int record_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Competitie_Id {
            get {
                return this.Competitie_IdField;
            }
            set {
                if ((this.Competitie_IdField.Equals(value) != true)) {
                    this.Competitie_IdField = value;
                    this.RaisePropertyChanged("Competitie_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id_Witspeler {
            get {
                return this.Id_WitspelerField;
            }
            set {
                if ((this.Id_WitspelerField.Equals(value) != true)) {
                    this.Id_WitspelerField = value;
                    this.RaisePropertyChanged("Id_Witspeler");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id_Zwartspeler {
            get {
                return this.Id_ZwartspelerField;
            }
            set {
                if ((this.Id_ZwartspelerField.Equals(value) != true)) {
                    this.Id_ZwartspelerField = value;
                    this.RaisePropertyChanged("Id_Zwartspeler");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Matchpoints_Black {
            get {
                return this.Matchpoints_BlackField;
            }
            set {
                if ((this.Matchpoints_BlackField.Equals(value) != true)) {
                    this.Matchpoints_BlackField = value;
                    this.RaisePropertyChanged("Matchpoints_Black");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Matchpoints_White {
            get {
                return this.Matchpoints_WhiteField;
            }
            set {
                if ((this.Matchpoints_WhiteField.Equals(value) != true)) {
                    this.Matchpoints_WhiteField = value;
                    this.RaisePropertyChanged("Matchpoints_White");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberChampionsgroupGame {
            get {
                return this.NumberChampionsgroupGameField;
            }
            set {
                if ((this.NumberChampionsgroupGameField.Equals(value) != true)) {
                    this.NumberChampionsgroupGameField = value;
                    this.RaisePropertyChanged("NumberChampionsgroupGame");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Pairing_Status_Level {
            get {
                return this.Pairing_Status_LevelField;
            }
            set {
                if ((this.Pairing_Status_LevelField.Equals(value) != true)) {
                    this.Pairing_Status_LevelField = value;
                    this.RaisePropertyChanged("Pairing_Status_Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rondernr {
            get {
                return this.RondernrField;
            }
            set {
                if ((this.RondernrField.Equals(value) != true)) {
                    this.RondernrField = value;
                    this.RaisePropertyChanged("Rondernr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sorteerwaarde {
            get {
                return this.SorteerwaardeField;
            }
            set {
                if ((this.SorteerwaardeField.Equals(value) != true)) {
                    this.SorteerwaardeField = value;
                    this.RaisePropertyChanged("Sorteerwaarde");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wedstrijdresultaat {
            get {
                return this.WedstrijdresultaatField;
            }
            set {
                if ((this.WedstrijdresultaatField.Equals(value) != true)) {
                    this.WedstrijdresultaatField = value;
                    this.RaisePropertyChanged("Wedstrijdresultaat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wedstrijdtype {
            get {
                return this.WedstrijdtypeField;
            }
            set {
                if ((this.WedstrijdtypeField.Equals(value) != true)) {
                    this.WedstrijdtypeField = value;
                    this.RaisePropertyChanged("Wedstrijdtype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Wit_Remise {
            get {
                return this.Wit_RemiseField;
            }
            set {
                if ((this.Wit_RemiseField.Equals(value) != true)) {
                    this.Wit_RemiseField = value;
                    this.RaisePropertyChanged("Wit_Remise");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Wit_Verlies {
            get {
                return this.Wit_VerliesField;
            }
            set {
                if ((this.Wit_VerliesField.Equals(value) != true)) {
                    this.Wit_VerliesField = value;
                    this.RaisePropertyChanged("Wit_Verlies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Wit_Winst {
            get {
                return this.Wit_WinstField;
            }
            set {
                if ((this.Wit_WinstField.Equals(value) != true)) {
                    this.Wit_WinstField = value;
                    this.RaisePropertyChanged("Wit_Winst");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Zwart_Remise {
            get {
                return this.Zwart_RemiseField;
            }
            set {
                if ((this.Zwart_RemiseField.Equals(value) != true)) {
                    this.Zwart_RemiseField = value;
                    this.RaisePropertyChanged("Zwart_Remise");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Zwart_Verlies {
            get {
                return this.Zwart_VerliesField;
            }
            set {
                if ((this.Zwart_VerliesField.Equals(value) != true)) {
                    this.Zwart_VerliesField = value;
                    this.RaisePropertyChanged("Zwart_Verlies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Zwart_Winst {
            get {
                return this.Zwart_WinstField;
            }
            set {
                if ((this.Zwart_WinstField.Equals(value) != true)) {
                    this.Zwart_WinstField = value;
                    this.RaisePropertyChanged("Zwart_Winst");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int record_id {
            get {
                return this.record_idField;
            }
            set {
                if ((this.record_idField.Equals(value) != true)) {
                    this.record_idField = value;
                    this.RaisePropertyChanged("record_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessData", Namespace="http://schemas.datacontract.org/2004/07/TSGS_CS_WCF_Service")]
    [System.SerializableAttribute()]
    public partial class AccessData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Huidige_GebruikerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStamp_Laatste_LoadField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Huidige_Gebruiker {
            get {
                return this.Huidige_GebruikerField;
            }
            set {
                if ((object.ReferenceEquals(this.Huidige_GebruikerField, value) != true)) {
                    this.Huidige_GebruikerField = value;
                    this.RaisePropertyChanged("Huidige_Gebruiker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIDField, value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp_Laatste_Load {
            get {
                return this.TimeStamp_Laatste_LoadField;
            }
            set {
                if ((this.TimeStamp_Laatste_LoadField.Equals(value) != true)) {
                    this.TimeStamp_Laatste_LoadField = value;
                    this.RaisePropertyChanged("TimeStamp_Laatste_Load");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompetitionManager", Namespace="http://schemas.datacontract.org/2004/07/TSGS_CS_WCF_Service")]
    [System.SerializableAttribute()]
    public partial class CompetitionManager : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompetitionManagerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompetitionManagerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FontsizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserPrivilegesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompetitionManagerId {
            get {
                return this.CompetitionManagerIdField;
            }
            set {
                if ((this.CompetitionManagerIdField.Equals(value) != true)) {
                    this.CompetitionManagerIdField = value;
                    this.RaisePropertyChanged("CompetitionManagerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompetitionManagerName {
            get {
                return this.CompetitionManagerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompetitionManagerNameField, value) != true)) {
                    this.CompetitionManagerNameField = value;
                    this.RaisePropertyChanged("CompetitionManagerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Fontsize {
            get {
                return this.FontsizeField;
            }
            set {
                if ((this.FontsizeField.Equals(value) != true)) {
                    this.FontsizeField = value;
                    this.RaisePropertyChanged("Fontsize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserPrivileges {
            get {
                return this.UserPrivilegesField;
            }
            set {
                if ((this.UserPrivilegesField.Equals(value) != true)) {
                    this.UserPrivilegesField = value;
                    this.RaisePropertyChanged("UserPrivileges");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbsenteeData", Namespace="http://schemas.datacontract.org/2004/07/TSGS_CS_WCF_Service")]
    [System.SerializableAttribute()]
    public partial class AbsenteeData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AfwezigheidscodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Competitie_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Kroongroep_partijnummerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NI_Record_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RondenummerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Speler_IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Afwezigheidscode {
            get {
                return this.AfwezigheidscodeField;
            }
            set {
                if ((this.AfwezigheidscodeField.Equals(value) != true)) {
                    this.AfwezigheidscodeField = value;
                    this.RaisePropertyChanged("Afwezigheidscode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Competitie_ID {
            get {
                return this.Competitie_IDField;
            }
            set {
                if ((this.Competitie_IDField.Equals(value) != true)) {
                    this.Competitie_IDField = value;
                    this.RaisePropertyChanged("Competitie_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Kroongroep_partijnummer {
            get {
                return this.Kroongroep_partijnummerField;
            }
            set {
                if ((this.Kroongroep_partijnummerField.Equals(value) != true)) {
                    this.Kroongroep_partijnummerField = value;
                    this.RaisePropertyChanged("Kroongroep_partijnummer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NI_Record_ID {
            get {
                return this.NI_Record_IDField;
            }
            set {
                if ((this.NI_Record_IDField.Equals(value) != true)) {
                    this.NI_Record_IDField = value;
                    this.RaisePropertyChanged("NI_Record_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rondenummer {
            get {
                return this.RondenummerField;
            }
            set {
                if ((this.RondenummerField.Equals(value) != true)) {
                    this.RondenummerField = value;
                    this.RaisePropertyChanged("Rondenummer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speler_ID {
            get {
                return this.Speler_IDField;
            }
            set {
                if ((this.Speler_IDField.Equals(value) != true)) {
                    this.Speler_IDField = value;
                    this.RaisePropertyChanged("Speler_ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerBasicData", Namespace="http://schemas.datacontract.org/2004/07/TSGS_CS_WCF_Service")]
    [System.SerializableAttribute()]
    public partial class PlayerBasicData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AchternaamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private sbyte ClublidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Competitie_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private sbyte Deelnemer_teruggetrokkenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private sbyte Doet_mee_met_snelschaakField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Email_AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FIDEnummerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FIDEratingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KNSBnummerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float KNSBratingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private sbyte Member_Premier_GroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Mobile_NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ProfilePictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float RapidratingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float RatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoepnaamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float SnelschaakratingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Speelt_blitz_sinds_rondeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private sbyte Speelt_mee_sinds_rondeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Speler_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float StartratingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private sbyte TeamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TelefoonnummerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TussenvoegselField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VoorlettersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private sbyte VrijgelootField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private sbyte Wants_EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private sbyte Wants_SMSField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Achternaam {
            get {
                return this.AchternaamField;
            }
            set {
                if ((object.ReferenceEquals(this.AchternaamField, value) != true)) {
                    this.AchternaamField = value;
                    this.RaisePropertyChanged("Achternaam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public sbyte Clublid {
            get {
                return this.ClublidField;
            }
            set {
                if ((this.ClublidField.Equals(value) != true)) {
                    this.ClublidField = value;
                    this.RaisePropertyChanged("Clublid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Competitie_Id {
            get {
                return this.Competitie_IdField;
            }
            set {
                if ((this.Competitie_IdField.Equals(value) != true)) {
                    this.Competitie_IdField = value;
                    this.RaisePropertyChanged("Competitie_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public sbyte Deelnemer_teruggetrokken {
            get {
                return this.Deelnemer_teruggetrokkenField;
            }
            set {
                if ((this.Deelnemer_teruggetrokkenField.Equals(value) != true)) {
                    this.Deelnemer_teruggetrokkenField = value;
                    this.RaisePropertyChanged("Deelnemer_teruggetrokken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public sbyte Doet_mee_met_snelschaak {
            get {
                return this.Doet_mee_met_snelschaakField;
            }
            set {
                if ((this.Doet_mee_met_snelschaakField.Equals(value) != true)) {
                    this.Doet_mee_met_snelschaakField = value;
                    this.RaisePropertyChanged("Doet_mee_met_snelschaak");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email_Address {
            get {
                return this.Email_AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.Email_AddressField, value) != true)) {
                    this.Email_AddressField = value;
                    this.RaisePropertyChanged("Email_Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FIDEnummer {
            get {
                return this.FIDEnummerField;
            }
            set {
                if ((this.FIDEnummerField.Equals(value) != true)) {
                    this.FIDEnummerField = value;
                    this.RaisePropertyChanged("FIDEnummer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FIDErating {
            get {
                return this.FIDEratingField;
            }
            set {
                if ((this.FIDEratingField.Equals(value) != true)) {
                    this.FIDEratingField = value;
                    this.RaisePropertyChanged("FIDErating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int KNSBnummer {
            get {
                return this.KNSBnummerField;
            }
            set {
                if ((this.KNSBnummerField.Equals(value) != true)) {
                    this.KNSBnummerField = value;
                    this.RaisePropertyChanged("KNSBnummer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float KNSBrating {
            get {
                return this.KNSBratingField;
            }
            set {
                if ((this.KNSBratingField.Equals(value) != true)) {
                    this.KNSBratingField = value;
                    this.RaisePropertyChanged("KNSBrating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public sbyte Member_Premier_Group {
            get {
                return this.Member_Premier_GroupField;
            }
            set {
                if ((this.Member_Premier_GroupField.Equals(value) != true)) {
                    this.Member_Premier_GroupField = value;
                    this.RaisePropertyChanged("Member_Premier_Group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mobile_Number {
            get {
                return this.Mobile_NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.Mobile_NumberField, value) != true)) {
                    this.Mobile_NumberField = value;
                    this.RaisePropertyChanged("Mobile_Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ProfilePicture {
            get {
                return this.ProfilePictureField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePictureField, value) != true)) {
                    this.ProfilePictureField = value;
                    this.RaisePropertyChanged("ProfilePicture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Rapidrating {
            get {
                return this.RapidratingField;
            }
            set {
                if ((this.RapidratingField.Equals(value) != true)) {
                    this.RapidratingField = value;
                    this.RaisePropertyChanged("Rapidrating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Roepnaam {
            get {
                return this.RoepnaamField;
            }
            set {
                if ((object.ReferenceEquals(this.RoepnaamField, value) != true)) {
                    this.RoepnaamField = value;
                    this.RaisePropertyChanged("Roepnaam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Snelschaakrating {
            get {
                return this.SnelschaakratingField;
            }
            set {
                if ((this.SnelschaakratingField.Equals(value) != true)) {
                    this.SnelschaakratingField = value;
                    this.RaisePropertyChanged("Snelschaakrating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speelt_blitz_sinds_ronde {
            get {
                return this.Speelt_blitz_sinds_rondeField;
            }
            set {
                if ((this.Speelt_blitz_sinds_rondeField.Equals(value) != true)) {
                    this.Speelt_blitz_sinds_rondeField = value;
                    this.RaisePropertyChanged("Speelt_blitz_sinds_ronde");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public sbyte Speelt_mee_sinds_ronde {
            get {
                return this.Speelt_mee_sinds_rondeField;
            }
            set {
                if ((this.Speelt_mee_sinds_rondeField.Equals(value) != true)) {
                    this.Speelt_mee_sinds_rondeField = value;
                    this.RaisePropertyChanged("Speelt_mee_sinds_ronde");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speler_ID {
            get {
                return this.Speler_IDField;
            }
            set {
                if ((this.Speler_IDField.Equals(value) != true)) {
                    this.Speler_IDField = value;
                    this.RaisePropertyChanged("Speler_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Startrating {
            get {
                return this.StartratingField;
            }
            set {
                if ((this.StartratingField.Equals(value) != true)) {
                    this.StartratingField = value;
                    this.RaisePropertyChanged("Startrating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public sbyte Team {
            get {
                return this.TeamField;
            }
            set {
                if ((this.TeamField.Equals(value) != true)) {
                    this.TeamField = value;
                    this.RaisePropertyChanged("Team");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Telefoonnummer {
            get {
                return this.TelefoonnummerField;
            }
            set {
                if ((object.ReferenceEquals(this.TelefoonnummerField, value) != true)) {
                    this.TelefoonnummerField = value;
                    this.RaisePropertyChanged("Telefoonnummer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Titel {
            get {
                return this.TitelField;
            }
            set {
                if ((object.ReferenceEquals(this.TitelField, value) != true)) {
                    this.TitelField = value;
                    this.RaisePropertyChanged("Titel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tussenvoegsel {
            get {
                return this.TussenvoegselField;
            }
            set {
                if ((object.ReferenceEquals(this.TussenvoegselField, value) != true)) {
                    this.TussenvoegselField = value;
                    this.RaisePropertyChanged("Tussenvoegsel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Voorletters {
            get {
                return this.VoorlettersField;
            }
            set {
                if ((object.ReferenceEquals(this.VoorlettersField, value) != true)) {
                    this.VoorlettersField = value;
                    this.RaisePropertyChanged("Voorletters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public sbyte Vrijgeloot {
            get {
                return this.VrijgelootField;
            }
            set {
                if ((this.VrijgelootField.Equals(value) != true)) {
                    this.VrijgelootField = value;
                    this.RaisePropertyChanged("Vrijgeloot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public sbyte Wants_Email {
            get {
                return this.Wants_EmailField;
            }
            set {
                if ((this.Wants_EmailField.Equals(value) != true)) {
                    this.Wants_EmailField = value;
                    this.RaisePropertyChanged("Wants_Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public sbyte Wants_SMS {
            get {
                return this.Wants_SMSField;
            }
            set {
                if ((this.Wants_SMSField.Equals(value) != true)) {
                    this.Wants_SMSField = value;
                    this.RaisePropertyChanged("Wants_SMS");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultData", Namespace="http://schemas.datacontract.org/2004/07/TSGS_CS_WCF_Service")]
    [System.SerializableAttribute()]
    public partial class ResultData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChampionsgroupGameNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Competitie_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float Competitie_ResultaatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float CorrectieOpCompetitieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float CorrectieOpEloField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Deelnemer_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ELO_ResultaatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KleurField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MatchpuntenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Originele_KroongroepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartijnaamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Plaats_Op_RanglijstField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultaatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RondedatumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RondernrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TegenstanderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte Was_DownfloatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte Was_UpfloatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int record_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChampionsgroupGameNumber {
            get {
                return this.ChampionsgroupGameNumberField;
            }
            set {
                if ((this.ChampionsgroupGameNumberField.Equals(value) != true)) {
                    this.ChampionsgroupGameNumberField = value;
                    this.RaisePropertyChanged("ChampionsgroupGameNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Competitie_Id {
            get {
                return this.Competitie_IdField;
            }
            set {
                if ((this.Competitie_IdField.Equals(value) != true)) {
                    this.Competitie_IdField = value;
                    this.RaisePropertyChanged("Competitie_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Competitie_Resultaat {
            get {
                return this.Competitie_ResultaatField;
            }
            set {
                if ((this.Competitie_ResultaatField.Equals(value) != true)) {
                    this.Competitie_ResultaatField = value;
                    this.RaisePropertyChanged("Competitie_Resultaat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float CorrectieOpCompetitie {
            get {
                return this.CorrectieOpCompetitieField;
            }
            set {
                if ((this.CorrectieOpCompetitieField.Equals(value) != true)) {
                    this.CorrectieOpCompetitieField = value;
                    this.RaisePropertyChanged("CorrectieOpCompetitie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float CorrectieOpElo {
            get {
                return this.CorrectieOpEloField;
            }
            set {
                if ((this.CorrectieOpEloField.Equals(value) != true)) {
                    this.CorrectieOpEloField = value;
                    this.RaisePropertyChanged("CorrectieOpElo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Deelnemer_ID {
            get {
                return this.Deelnemer_IDField;
            }
            set {
                if ((this.Deelnemer_IDField.Equals(value) != true)) {
                    this.Deelnemer_IDField = value;
                    this.RaisePropertyChanged("Deelnemer_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float ELO_Resultaat {
            get {
                return this.ELO_ResultaatField;
            }
            set {
                if ((this.ELO_ResultaatField.Equals(value) != true)) {
                    this.ELO_ResultaatField = value;
                    this.RaisePropertyChanged("ELO_Resultaat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Kleur {
            get {
                return this.KleurField;
            }
            set {
                if ((this.KleurField.Equals(value) != true)) {
                    this.KleurField = value;
                    this.RaisePropertyChanged("Kleur");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Matchpunten {
            get {
                return this.MatchpuntenField;
            }
            set {
                if ((this.MatchpuntenField.Equals(value) != true)) {
                    this.MatchpuntenField = value;
                    this.RaisePropertyChanged("Matchpunten");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Originele_Kroongroep {
            get {
                return this.Originele_KroongroepField;
            }
            set {
                if ((this.Originele_KroongroepField.Equals(value) != true)) {
                    this.Originele_KroongroepField = value;
                    this.RaisePropertyChanged("Originele_Kroongroep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Partijnaam {
            get {
                return this.PartijnaamField;
            }
            set {
                if ((object.ReferenceEquals(this.PartijnaamField, value) != true)) {
                    this.PartijnaamField = value;
                    this.RaisePropertyChanged("Partijnaam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Plaats_Op_Ranglijst {
            get {
                return this.Plaats_Op_RanglijstField;
            }
            set {
                if ((this.Plaats_Op_RanglijstField.Equals(value) != true)) {
                    this.Plaats_Op_RanglijstField = value;
                    this.RaisePropertyChanged("Plaats_Op_Ranglijst");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Resultaat {
            get {
                return this.ResultaatField;
            }
            set {
                if ((this.ResultaatField.Equals(value) != true)) {
                    this.ResultaatField = value;
                    this.RaisePropertyChanged("Resultaat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Rondedatum {
            get {
                return this.RondedatumField;
            }
            set {
                if ((this.RondedatumField.Equals(value) != true)) {
                    this.RondedatumField = value;
                    this.RaisePropertyChanged("Rondedatum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rondernr {
            get {
                return this.RondernrField;
            }
            set {
                if ((this.RondernrField.Equals(value) != true)) {
                    this.RondernrField = value;
                    this.RaisePropertyChanged("Rondernr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tegenstander {
            get {
                return this.TegenstanderField;
            }
            set {
                if ((this.TegenstanderField.Equals(value) != true)) {
                    this.TegenstanderField = value;
                    this.RaisePropertyChanged("Tegenstander");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Was_Downfloat {
            get {
                return this.Was_DownfloatField;
            }
            set {
                if ((this.Was_DownfloatField.Equals(value) != true)) {
                    this.Was_DownfloatField = value;
                    this.RaisePropertyChanged("Was_Downfloat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Was_Upfloat {
            get {
                return this.Was_UpfloatField;
            }
            set {
                if ((this.Was_UpfloatField.Equals(value) != true)) {
                    this.Was_UpfloatField = value;
                    this.RaisePropertyChanged("Was_Upfloat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int record_id {
            get {
                return this.record_idField;
            }
            set {
                if ((this.record_idField.Equals(value) != true)) {
                    this.record_idField = value;
                    this.RaisePropertyChanged("record_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeneralInfo", Namespace="http://schemas.datacontract.org/2004/07/TSGS_CS_WCF_Service")]
    [System.SerializableAttribute()]
    public partial class GeneralInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AanmaakdatumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Aantal_Unieke_RondenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Aantal_groepenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Aantal_rondenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float AccelerationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Bonus_externe_wedstrijdenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Client_FTP_HostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Client_FTP_PWField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Client_FTP_UNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Competitie_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Competitie_TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IntegrateWithField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Intern_BasisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Intern_CompetitieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Intern_Competitie_ImagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Intern_ImagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Intern_TemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Laatste_rondeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Naam_competitieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PartijenPerRondeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ProfilePictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeizoenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StandaarddeviatieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Strafpunten_afmeldenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Strafpunten_wegblijvenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VerenigingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Vrij_afmeldenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Website_BasisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Website_CompetitieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Website_Competitie_ImagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Website_TemplateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Aanmaakdatum {
            get {
                return this.AanmaakdatumField;
            }
            set {
                if ((this.AanmaakdatumField.Equals(value) != true)) {
                    this.AanmaakdatumField = value;
                    this.RaisePropertyChanged("Aanmaakdatum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Aantal_Unieke_Ronden {
            get {
                return this.Aantal_Unieke_RondenField;
            }
            set {
                if ((this.Aantal_Unieke_RondenField.Equals(value) != true)) {
                    this.Aantal_Unieke_RondenField = value;
                    this.RaisePropertyChanged("Aantal_Unieke_Ronden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Aantal_groepen {
            get {
                return this.Aantal_groepenField;
            }
            set {
                if ((this.Aantal_groepenField.Equals(value) != true)) {
                    this.Aantal_groepenField = value;
                    this.RaisePropertyChanged("Aantal_groepen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Aantal_ronden {
            get {
                return this.Aantal_rondenField;
            }
            set {
                if ((this.Aantal_rondenField.Equals(value) != true)) {
                    this.Aantal_rondenField = value;
                    this.RaisePropertyChanged("Aantal_ronden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Acceleration {
            get {
                return this.AccelerationField;
            }
            set {
                if ((this.AccelerationField.Equals(value) != true)) {
                    this.AccelerationField = value;
                    this.RaisePropertyChanged("Acceleration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Bonus_externe_wedstrijden {
            get {
                return this.Bonus_externe_wedstrijdenField;
            }
            set {
                if ((this.Bonus_externe_wedstrijdenField.Equals(value) != true)) {
                    this.Bonus_externe_wedstrijdenField = value;
                    this.RaisePropertyChanged("Bonus_externe_wedstrijden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Client_FTP_Host {
            get {
                return this.Client_FTP_HostField;
            }
            set {
                if ((object.ReferenceEquals(this.Client_FTP_HostField, value) != true)) {
                    this.Client_FTP_HostField = value;
                    this.RaisePropertyChanged("Client_FTP_Host");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Client_FTP_PW {
            get {
                return this.Client_FTP_PWField;
            }
            set {
                if ((object.ReferenceEquals(this.Client_FTP_PWField, value) != true)) {
                    this.Client_FTP_PWField = value;
                    this.RaisePropertyChanged("Client_FTP_PW");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Client_FTP_UN {
            get {
                return this.Client_FTP_UNField;
            }
            set {
                if ((object.ReferenceEquals(this.Client_FTP_UNField, value) != true)) {
                    this.Client_FTP_UNField = value;
                    this.RaisePropertyChanged("Client_FTP_UN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Competitie_Id {
            get {
                return this.Competitie_IdField;
            }
            set {
                if ((this.Competitie_IdField.Equals(value) != true)) {
                    this.Competitie_IdField = value;
                    this.RaisePropertyChanged("Competitie_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Competitie_Type {
            get {
                return this.Competitie_TypeField;
            }
            set {
                if ((this.Competitie_TypeField.Equals(value) != true)) {
                    this.Competitie_TypeField = value;
                    this.RaisePropertyChanged("Competitie_Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentState {
            get {
                return this.CurrentStateField;
            }
            set {
                if ((this.CurrentStateField.Equals(value) != true)) {
                    this.CurrentStateField = value;
                    this.RaisePropertyChanged("CurrentState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IntegrateWith {
            get {
                return this.IntegrateWithField;
            }
            set {
                if ((this.IntegrateWithField.Equals(value) != true)) {
                    this.IntegrateWithField = value;
                    this.RaisePropertyChanged("IntegrateWith");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Intern_Basis {
            get {
                return this.Intern_BasisField;
            }
            set {
                if ((object.ReferenceEquals(this.Intern_BasisField, value) != true)) {
                    this.Intern_BasisField = value;
                    this.RaisePropertyChanged("Intern_Basis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Intern_Competitie {
            get {
                return this.Intern_CompetitieField;
            }
            set {
                if ((object.ReferenceEquals(this.Intern_CompetitieField, value) != true)) {
                    this.Intern_CompetitieField = value;
                    this.RaisePropertyChanged("Intern_Competitie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Intern_Competitie_Images {
            get {
                return this.Intern_Competitie_ImagesField;
            }
            set {
                if ((object.ReferenceEquals(this.Intern_Competitie_ImagesField, value) != true)) {
                    this.Intern_Competitie_ImagesField = value;
                    this.RaisePropertyChanged("Intern_Competitie_Images");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Intern_Images {
            get {
                return this.Intern_ImagesField;
            }
            set {
                if ((object.ReferenceEquals(this.Intern_ImagesField, value) != true)) {
                    this.Intern_ImagesField = value;
                    this.RaisePropertyChanged("Intern_Images");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Intern_Template {
            get {
                return this.Intern_TemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.Intern_TemplateField, value) != true)) {
                    this.Intern_TemplateField = value;
                    this.RaisePropertyChanged("Intern_Template");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int KFactor {
            get {
                return this.KFactorField;
            }
            set {
                if ((this.KFactorField.Equals(value) != true)) {
                    this.KFactorField = value;
                    this.RaisePropertyChanged("KFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Laatste_ronde {
            get {
                return this.Laatste_rondeField;
            }
            set {
                if ((this.Laatste_rondeField.Equals(value) != true)) {
                    this.Laatste_rondeField = value;
                    this.RaisePropertyChanged("Laatste_ronde");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Naam_competitie {
            get {
                return this.Naam_competitieField;
            }
            set {
                if ((object.ReferenceEquals(this.Naam_competitieField, value) != true)) {
                    this.Naam_competitieField = value;
                    this.RaisePropertyChanged("Naam_competitie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PartijenPerRonde {
            get {
                return this.PartijenPerRondeField;
            }
            set {
                if ((this.PartijenPerRondeField.Equals(value) != true)) {
                    this.PartijenPerRondeField = value;
                    this.RaisePropertyChanged("PartijenPerRonde");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ProfilePicture {
            get {
                return this.ProfilePictureField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePictureField, value) != true)) {
                    this.ProfilePictureField = value;
                    this.RaisePropertyChanged("ProfilePicture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seizoen {
            get {
                return this.SeizoenField;
            }
            set {
                if ((this.SeizoenField.Equals(value) != true)) {
                    this.SeizoenField = value;
                    this.RaisePropertyChanged("Seizoen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Standaarddeviatie {
            get {
                return this.StandaarddeviatieField;
            }
            set {
                if ((this.StandaarddeviatieField.Equals(value) != true)) {
                    this.StandaarddeviatieField = value;
                    this.RaisePropertyChanged("Standaarddeviatie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Strafpunten_afmelden {
            get {
                return this.Strafpunten_afmeldenField;
            }
            set {
                if ((this.Strafpunten_afmeldenField.Equals(value) != true)) {
                    this.Strafpunten_afmeldenField = value;
                    this.RaisePropertyChanged("Strafpunten_afmelden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Strafpunten_wegblijven {
            get {
                return this.Strafpunten_wegblijvenField;
            }
            set {
                if ((this.Strafpunten_wegblijvenField.Equals(value) != true)) {
                    this.Strafpunten_wegblijvenField = value;
                    this.RaisePropertyChanged("Strafpunten_wegblijven");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Vereniging {
            get {
                return this.VerenigingField;
            }
            set {
                if ((object.ReferenceEquals(this.VerenigingField, value) != true)) {
                    this.VerenigingField = value;
                    this.RaisePropertyChanged("Vereniging");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Vrij_afmelden {
            get {
                return this.Vrij_afmeldenField;
            }
            set {
                if ((this.Vrij_afmeldenField.Equals(value) != true)) {
                    this.Vrij_afmeldenField = value;
                    this.RaisePropertyChanged("Vrij_afmelden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Website_Basis {
            get {
                return this.Website_BasisField;
            }
            set {
                if ((object.ReferenceEquals(this.Website_BasisField, value) != true)) {
                    this.Website_BasisField = value;
                    this.RaisePropertyChanged("Website_Basis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Website_Competitie {
            get {
                return this.Website_CompetitieField;
            }
            set {
                if ((object.ReferenceEquals(this.Website_CompetitieField, value) != true)) {
                    this.Website_CompetitieField = value;
                    this.RaisePropertyChanged("Website_Competitie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Website_Competitie_Images {
            get {
                return this.Website_Competitie_ImagesField;
            }
            set {
                if ((object.ReferenceEquals(this.Website_Competitie_ImagesField, value) != true)) {
                    this.Website_Competitie_ImagesField = value;
                    this.RaisePropertyChanged("Website_Competitie_Images");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Website_Template {
            get {
                return this.Website_TemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.Website_TemplateField, value) != true)) {
                    this.Website_TemplateField = value;
                    this.RaisePropertyChanged("Website_Template");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="General_Swiss_Info", Namespace="http://schemas.datacontract.org/2004/07/TSGS_CS_WCF_Service")]
    [System.SerializableAttribute()]
    public partial class General_Swiss_Info : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AanmaakdatumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Aantal_InvoerpuntenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Aantal_Partijen_Per_UitslagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Aantal_Rating_GroepenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Aantal_RondenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Client_FTP_HostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Client_FTP_PWField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Client_FTP_UNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Competitie_TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Decentrale_Invoer_MaximaalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Decentrale_Invoer_SpreadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HoofdsponsorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Indelings_ModusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Laatste_RondeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PartijenPerRondeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ProfilePictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Restrictie_Rating_GrensField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Restrictie_RondenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubsponsorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Toernooi_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] Toernooi_LogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Toernooi_NaamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Website_BasisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Website_CompetitieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Website_TemplateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Aanmaakdatum {
            get {
                return this.AanmaakdatumField;
            }
            set {
                if ((this.AanmaakdatumField.Equals(value) != true)) {
                    this.AanmaakdatumField = value;
                    this.RaisePropertyChanged("Aanmaakdatum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Aantal_Invoerpunten {
            get {
                return this.Aantal_InvoerpuntenField;
            }
            set {
                if ((this.Aantal_InvoerpuntenField.Equals(value) != true)) {
                    this.Aantal_InvoerpuntenField = value;
                    this.RaisePropertyChanged("Aantal_Invoerpunten");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Aantal_Partijen_Per_Uitslag {
            get {
                return this.Aantal_Partijen_Per_UitslagField;
            }
            set {
                if ((this.Aantal_Partijen_Per_UitslagField.Equals(value) != true)) {
                    this.Aantal_Partijen_Per_UitslagField = value;
                    this.RaisePropertyChanged("Aantal_Partijen_Per_Uitslag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Aantal_Rating_Groepen {
            get {
                return this.Aantal_Rating_GroepenField;
            }
            set {
                if ((this.Aantal_Rating_GroepenField.Equals(value) != true)) {
                    this.Aantal_Rating_GroepenField = value;
                    this.RaisePropertyChanged("Aantal_Rating_Groepen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Aantal_Ronden {
            get {
                return this.Aantal_RondenField;
            }
            set {
                if ((this.Aantal_RondenField.Equals(value) != true)) {
                    this.Aantal_RondenField = value;
                    this.RaisePropertyChanged("Aantal_Ronden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Client_FTP_Host {
            get {
                return this.Client_FTP_HostField;
            }
            set {
                if ((object.ReferenceEquals(this.Client_FTP_HostField, value) != true)) {
                    this.Client_FTP_HostField = value;
                    this.RaisePropertyChanged("Client_FTP_Host");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Client_FTP_PW {
            get {
                return this.Client_FTP_PWField;
            }
            set {
                if ((object.ReferenceEquals(this.Client_FTP_PWField, value) != true)) {
                    this.Client_FTP_PWField = value;
                    this.RaisePropertyChanged("Client_FTP_PW");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Client_FTP_UN {
            get {
                return this.Client_FTP_UNField;
            }
            set {
                if ((object.ReferenceEquals(this.Client_FTP_UNField, value) != true)) {
                    this.Client_FTP_UNField = value;
                    this.RaisePropertyChanged("Client_FTP_UN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Competitie_Type {
            get {
                return this.Competitie_TypeField;
            }
            set {
                if ((this.Competitie_TypeField.Equals(value) != true)) {
                    this.Competitie_TypeField = value;
                    this.RaisePropertyChanged("Competitie_Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentState {
            get {
                return this.CurrentStateField;
            }
            set {
                if ((this.CurrentStateField.Equals(value) != true)) {
                    this.CurrentStateField = value;
                    this.RaisePropertyChanged("CurrentState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Decentrale_Invoer_Maximaal {
            get {
                return this.Decentrale_Invoer_MaximaalField;
            }
            set {
                if ((this.Decentrale_Invoer_MaximaalField.Equals(value) != true)) {
                    this.Decentrale_Invoer_MaximaalField = value;
                    this.RaisePropertyChanged("Decentrale_Invoer_Maximaal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Decentrale_Invoer_Spread {
            get {
                return this.Decentrale_Invoer_SpreadField;
            }
            set {
                if ((this.Decentrale_Invoer_SpreadField.Equals(value) != true)) {
                    this.Decentrale_Invoer_SpreadField = value;
                    this.RaisePropertyChanged("Decentrale_Invoer_Spread");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hoofdsponsor {
            get {
                return this.HoofdsponsorField;
            }
            set {
                if ((object.ReferenceEquals(this.HoofdsponsorField, value) != true)) {
                    this.HoofdsponsorField = value;
                    this.RaisePropertyChanged("Hoofdsponsor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Indelings_Modus {
            get {
                return this.Indelings_ModusField;
            }
            set {
                if ((this.Indelings_ModusField.Equals(value) != true)) {
                    this.Indelings_ModusField = value;
                    this.RaisePropertyChanged("Indelings_Modus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int KFactor {
            get {
                return this.KFactorField;
            }
            set {
                if ((this.KFactorField.Equals(value) != true)) {
                    this.KFactorField = value;
                    this.RaisePropertyChanged("KFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Laatste_Ronde {
            get {
                return this.Laatste_RondeField;
            }
            set {
                if ((this.Laatste_RondeField.Equals(value) != true)) {
                    this.Laatste_RondeField = value;
                    this.RaisePropertyChanged("Laatste_Ronde");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PartijenPerRonde {
            get {
                return this.PartijenPerRondeField;
            }
            set {
                if ((this.PartijenPerRondeField.Equals(value) != true)) {
                    this.PartijenPerRondeField = value;
                    this.RaisePropertyChanged("PartijenPerRonde");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ProfilePicture {
            get {
                return this.ProfilePictureField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePictureField, value) != true)) {
                    this.ProfilePictureField = value;
                    this.RaisePropertyChanged("ProfilePicture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Restrictie_Rating_Grens {
            get {
                return this.Restrictie_Rating_GrensField;
            }
            set {
                if ((this.Restrictie_Rating_GrensField.Equals(value) != true)) {
                    this.Restrictie_Rating_GrensField = value;
                    this.RaisePropertyChanged("Restrictie_Rating_Grens");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Restrictie_Ronden {
            get {
                return this.Restrictie_RondenField;
            }
            set {
                if ((this.Restrictie_RondenField.Equals(value) != true)) {
                    this.Restrictie_RondenField = value;
                    this.RaisePropertyChanged("Restrictie_Ronden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subsponsors {
            get {
                return this.SubsponsorsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubsponsorsField, value) != true)) {
                    this.SubsponsorsField = value;
                    this.RaisePropertyChanged("Subsponsors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Toernooi_Id {
            get {
                return this.Toernooi_IdField;
            }
            set {
                if ((this.Toernooi_IdField.Equals(value) != true)) {
                    this.Toernooi_IdField = value;
                    this.RaisePropertyChanged("Toernooi_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Toernooi_Logo {
            get {
                return this.Toernooi_LogoField;
            }
            set {
                if ((object.ReferenceEquals(this.Toernooi_LogoField, value) != true)) {
                    this.Toernooi_LogoField = value;
                    this.RaisePropertyChanged("Toernooi_Logo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Toernooi_Naam {
            get {
                return this.Toernooi_NaamField;
            }
            set {
                if ((object.ReferenceEquals(this.Toernooi_NaamField, value) != true)) {
                    this.Toernooi_NaamField = value;
                    this.RaisePropertyChanged("Toernooi_Naam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Website_Basis {
            get {
                return this.Website_BasisField;
            }
            set {
                if ((object.ReferenceEquals(this.Website_BasisField, value) != true)) {
                    this.Website_BasisField = value;
                    this.RaisePropertyChanged("Website_Basis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Website_Competitie {
            get {
                return this.Website_CompetitieField;
            }
            set {
                if ((object.ReferenceEquals(this.Website_CompetitieField, value) != true)) {
                    this.Website_CompetitieField = value;
                    this.RaisePropertyChanged("Website_Competitie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Website_Template {
            get {
                return this.Website_TemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.Website_TemplateField, value) != true)) {
                    this.Website_TemplateField = value;
                    this.RaisePropertyChanged("Website_Template");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChampionsgroupData", Namespace="http://schemas.datacontract.org/2004/07/TSGS_CS_WCF_Service")]
    [System.SerializableAttribute()]
    public partial class ChampionsgroupData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Competition_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LotNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Player_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartCompetitionPointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartRatingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Competition_Id {
            get {
                return this.Competition_IdField;
            }
            set {
                if ((this.Competition_IdField.Equals(value) != true)) {
                    this.Competition_IdField = value;
                    this.RaisePropertyChanged("Competition_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LotNumber {
            get {
                return this.LotNumberField;
            }
            set {
                if ((this.LotNumberField.Equals(value) != true)) {
                    this.LotNumberField = value;
                    this.RaisePropertyChanged("LotNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Player_Id {
            get {
                return this.Player_IdField;
            }
            set {
                if ((this.Player_IdField.Equals(value) != true)) {
                    this.Player_IdField = value;
                    this.RaisePropertyChanged("Player_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartCompetitionPoints {
            get {
                return this.StartCompetitionPointsField;
            }
            set {
                if ((this.StartCompetitionPointsField.Equals(value) != true)) {
                    this.StartCompetitionPointsField = value;
                    this.RaisePropertyChanged("StartCompetitionPoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartRating {
            get {
                return this.StartRatingField;
            }
            set {
                if ((this.StartRatingField.Equals(value) != true)) {
                    this.StartRatingField = value;
                    this.RaisePropertyChanged("StartRating");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlitzResultData", Namespace="http://schemas.datacontract.org/2004/07/TSGS_CS_WCF_Service")]
    [System.SerializableAttribute()]
    public partial class BlitzResultData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Competitie_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Deelnemer_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Deelnemer_Id1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroepnummerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MatchpuntenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RondedatumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RondernrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float StrafpuntenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Competitie_Id {
            get {
                return this.Competitie_IdField;
            }
            set {
                if ((this.Competitie_IdField.Equals(value) != true)) {
                    this.Competitie_IdField = value;
                    this.RaisePropertyChanged("Competitie_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Deelnemer_ID {
            get {
                return this.Deelnemer_IDField;
            }
            set {
                if ((this.Deelnemer_IDField.Equals(value) != true)) {
                    this.Deelnemer_IDField = value;
                    this.RaisePropertyChanged("Deelnemer_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="Deelnemer_Id")]
        public int Deelnemer_Id1 {
            get {
                return this.Deelnemer_Id1Field;
            }
            set {
                if ((this.Deelnemer_Id1Field.Equals(value) != true)) {
                    this.Deelnemer_Id1Field = value;
                    this.RaisePropertyChanged("Deelnemer_Id1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Groepnummer {
            get {
                return this.GroepnummerField;
            }
            set {
                if ((this.GroepnummerField.Equals(value) != true)) {
                    this.GroepnummerField = value;
                    this.RaisePropertyChanged("Groepnummer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Matchpunten {
            get {
                return this.MatchpuntenField;
            }
            set {
                if ((this.MatchpuntenField.Equals(value) != true)) {
                    this.MatchpuntenField = value;
                    this.RaisePropertyChanged("Matchpunten");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Rondedatum {
            get {
                return this.RondedatumField;
            }
            set {
                if ((this.RondedatumField.Equals(value) != true)) {
                    this.RondedatumField = value;
                    this.RaisePropertyChanged("Rondedatum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rondernr {
            get {
                return this.RondernrField;
            }
            set {
                if ((this.RondernrField.Equals(value) != true)) {
                    this.RondernrField = value;
                    this.RaisePropertyChanged("Rondernr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Strafpunten {
            get {
                return this.StrafpuntenField;
            }
            set {
                if ((this.StrafpuntenField.Equals(value) != true)) {
                    this.StrafpuntenField = value;
                    this.RaisePropertyChanged("Strafpunten");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TSGS_CS_WCF_Service.ITSGS_CS_WCF_Service")]
    public interface ITSGS_CS_WCF_Service {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersBlitz", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersBlitzResponse")]
        System.Data.DataSet GetPlayersBlitz(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersBlitz", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersBlitzResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPlayersBlitzAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetClubBlitzRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetClubBlitzRatingResponse")]
        float GetClubBlitzRating(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetClubBlitzRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetClubBlitzRatingResponse")]
        System.Threading.Tasks.Task<float> GetClubBlitzRatingAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetKFactor", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetKFactorResponse")]
        float GetKFactor(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetKFactor", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetKFactorResponse")]
        System.Threading.Tasks.Task<float> GetKFactorAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAcceleration", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAccelerationResponse")]
        float GetAcceleration(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAcceleration", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAccelerationResponse")]
        System.Threading.Tasks.Task<float> GetAccelerationAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/SaveBlitzRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/SaveBlitzRatingResponse")]
        bool SaveBlitzRating(int PID, float Rating, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/SaveBlitzRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/SaveBlitzRatingResponse")]
        System.Threading.Tasks.Task<bool> SaveBlitzRatingAsync(int PID, float Rating, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_RatingRound", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_RatingRoundResponse")]
        bool Remove_RatingRound(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_RatingRound", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_RatingRoundResponse")]
        System.Threading.Tasks.Task<bool> Remove_RatingRoundAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzRatingRanking", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzRatingRankingResponse")]
        System.Data.DataSet GetBlitzRatingRanking();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzRatingRanking", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzRatingRankingResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBlitzRatingRankingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersUniqueBlitz", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersUniqueBlitzResponse")]
        System.Data.DataSet GetPlayersUniqueBlitz(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersUniqueBlitz", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersUniqueBlitzResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPlayersUniqueBlitzAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzPenaltyPointsCleaned", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzPenaltyPointsCleanedResponse")]
        float GetBlitzPenaltyPointsCleaned(int CID, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzPenaltyPointsCleaned", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzPenaltyPointsCleanedResponse")]
        System.Threading.Tasks.Task<float> GetBlitzPenaltyPointsCleanedAsync(int CID, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzPenaltyPoints", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzPenaltyPointsResponse")]
        float GetBlitzPenaltyPoints(int CID, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzPenaltyPoints", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzPenaltyPointsResponse")]
        System.Threading.Tasks.Task<float> GetBlitzPenaltyPointsAsync(int CID, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzDisplayPoints", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzDisplayPointsResponse")]
        System.Data.DataSet GetBlitzDisplayPoints(int CID, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzDisplayPoints", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetBlitzDisplayPointsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBlitzDisplayPointsAsync(int CID, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBNumber", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBNumberResponse")]
        int GetKNSBNumber(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBNumber", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBNumberResponse")]
        System.Threading.Tasks.Task<int> GetKNSBNumberAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/MakeImageSourceData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/MakeImageSourceDataResponse")]
        string MakeImageSourceData(byte[] bytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/MakeImageSourceData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/MakeImageSourceDataResponse")]
        System.Threading.Tasks.Task<string> MakeImageSourceDataAsync(byte[] bytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/StringImage", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/StringImageResponse")]
        string StringImage(int PID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/StringImage", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/StringImageResponse")]
        System.Threading.Tasks.Task<string> StringImageAsync(int PID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerProfilePictureFile", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerProfilePictureFileResponse")]
        byte[] GetPlayerProfilePictureFile(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerProfilePictureFile", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerProfilePictureFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetPlayerProfilePictureFileAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNoPictureFile", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNoPictureFileResponse")]
        byte[] GetNoPictureFile(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNoPictureFile", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNoPictureFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetNoPictureFileAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetTeamData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetTeamDataResponse")]
        System.Data.DataSet GetTeamData(string Association);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetTeamData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetTeamDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTeamDataAsync(string Association);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetTeamPlayers", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetTeamPlayersResponse")]
        System.Data.DataSet GetTeamPlayers(string Association);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetTeamPlayers", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetTeamPlayersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTeamPlayersAsync(string Association);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/RemoveTeam", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/RemoveTeamResponse")]
        bool RemoveTeam(string VER, int Team_Record_Nummer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/RemoveTeam", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/RemoveTeamResponse")]
        System.Threading.Tasks.Task<bool> RemoveTeamAsync(string VER, int Team_Record_Nummer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateTeam", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateTeamResponse")]
        bool UpdateTeam(string VER, int Team_nr, string URL, string Teamnaam, int Team_Record_Nummer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateTeam", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateTeamResponse")]
        System.Threading.Tasks.Task<bool> UpdateTeamAsync(string VER, int Team_nr, string URL, string Teamnaam, int Team_Record_Nummer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddTeam", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddTeamResponse")]
        bool AddTeam(string VER, string URL, string Teamnaam, int Team_nr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddTeam", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddTeamResponse")]
        System.Threading.Tasks.Task<bool> AddTeamAsync(string VER, string URL, string Teamnaam, int Team_nr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateInteger", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateIntegerResponse")]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerResponse ValidateInteger(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateInteger", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateIntegerResponse")]
        System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerResponse> ValidateIntegerAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateReal", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateRealResponse")]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealResponse ValidateReal(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateReal", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateRealResponse")]
        System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealResponse> ValidateRealAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateString", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateStringResponse")]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringResponse ValidateString(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateString", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/ValidateStringResponse")]
        System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringResponse> ValidateStringAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Round_Information", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Round_InformationResponse")]
        bool Remove_Round_Information(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Round_Information", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Round_InformationResponse")]
        System.Threading.Tasks.Task<bool> Remove_Round_InformationAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Get_Workflow_Item", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Get_Workflow_ItemResponse")]
        int Get_Workflow_Item(string Item_Name, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Get_Workflow_Item", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Get_Workflow_ItemResponse")]
        System.Threading.Tasks.Task<int> Get_Workflow_ItemAsync(string Item_Name, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersWithByeList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersWithByeListResponse")]
        System.Data.DataSet GetPlayersWithByeList(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersWithByeList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayersWithByeListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPlayersWithByeListAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetRetentionStatistics", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetRetentionStatisticsResponse")]
        System.Data.DataSet GetRetentionStatistics(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetRetentionStatistics", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetRetentionStatisticsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRetentionStatisticsAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_National_Ratingtable", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_National_RatingtableResponse")]
        bool Update_National_Ratingtable(string Filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_National_Ratingtable", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_National_RatingtableResponse")]
        System.Threading.Tasks.Task<bool> Update_National_RatingtableAsync(string Filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_FIDE_Ratingtable", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_FIDE_RatingtableResponse")]
        bool Update_FIDE_Ratingtable(string Filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_FIDE_Ratingtable", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_FIDE_RatingtableResponse")]
        System.Threading.Tasks.Task<bool> Update_FIDE_RatingtableAsync(string Filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetUniquePlayers", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetUniquePlayersResponse")]
        System.Data.DataSet GetUniquePlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetUniquePlayers", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetUniquePlayersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUniquePlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_KNSB_and_FIDE_Ratings", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_KNSB_and_FIDE_RatingsResponse")]
        bool Update_KNSB_and_FIDE_Ratings(int PID, int KNSB, int FIDE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_KNSB_and_FIDE_Ratings", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_KNSB_and_FIDE_RatingsResponse")]
        System.Threading.Tasks.Task<bool> Update_KNSB_and_FIDE_RatingsAsync(int PID, int KNSB, int FIDE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/PrepareBlitzRanking", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/PrepareBlitzRankingResponse")]
        bool PrepareBlitzRanking(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/PrepareBlitzRanking", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/PrepareBlitzRankingResponse")]
        System.Threading.Tasks.Task<bool> PrepareBlitzRankingAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupSchedule", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupScheduleResponse")]
        System.Data.DataSet GetChampionsgroupSchedule(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupSchedule", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupScheduleResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetChampionsgroupScheduleAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetLastPlayerID", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetLastPlayerIDResponse")]
        int GetLastPlayerID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetLastPlayerID", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetLastPlayerIDResponse")]
        System.Threading.Tasks.Task<int> GetLastPlayerIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddGame", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddGameResponse")]
        bool AddGame(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GamesData OneGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddGame", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddGameResponse")]
        System.Threading.Tasks.Task<bool> AddGameAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GamesData OneGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetStateDescriptions", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetStateDescriptionsResponse")]
        System.Data.DataSet GetStateDescriptions(int TC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetStateDescriptions", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetStateDescriptionsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStateDescriptionsAsync(int TC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionTypes", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionTypesResponse")]
        System.Data.DataSet GetCompetitionTypes(int TC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionTypes", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionTypesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompetitionTypesAsync(int TC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionType", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionTypeResponse")]
        int GetCompetitionType(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionType", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionTypeResponse")]
        System.Threading.Tasks.Task<int> GetCompetitionTypeAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Work_Images", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Work_ImagesResponse")]
        bool Remove_Work_Images(string workmap);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Work_Images", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Work_ImagesResponse")]
        System.Threading.Tasks.Task<bool> Remove_Work_ImagesAsync(string workmap);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Obsolete_Players", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Obsolete_PlayersResponse")]
        bool Remove_Obsolete_Players();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Obsolete_Players", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Obsolete_PlayersResponse")]
        System.Threading.Tasks.Task<bool> Remove_Obsolete_PlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_One_Competition", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_One_CompetitionResponse")]
        bool Remove_One_Competition(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_One_Competition", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_One_CompetitionResponse")]
        System.Threading.Tasks.Task<bool> Remove_One_CompetitionAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Backup", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Create_BackupResponse")]
        bool Create_Backup(string BackUpString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Backup", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Create_BackupResponse")]
        System.Threading.Tasks.Task<bool> Create_BackupAsync(string BackUpString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllOccurrencesOfOneGame", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllOccurrencesOfOneGameResponse")]
        System.Data.DataSet GetAllOccurrencesOfOneGame(int PID, int AID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllOccurrencesOfOneGame", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllOccurrencesOfOneGameResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllOccurrencesOfOneGameAsync(int PID, int AID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessUser", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessUserResponse")]
        int UpdateAccessUser(string Session_Identification, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessUser", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessUserResponse")]
        System.Threading.Tasks.Task<int> UpdateAccessUserAsync(string Session_Identification, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessNumber", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessNumberResponse")]
        int UpdateAccessNumber(string Session_Identification, string Manager_Identification, int UpdateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessNumber", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessNumberResponse")]
        System.Threading.Tasks.Task<int> UpdateAccessNumberAsync(string Session_Identification, string Manager_Identification, int UpdateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessTimeStamp", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessTimeStampResponse")]
        int UpdateAccessTimeStamp(string Session_Identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessTimeStamp", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAccessTimeStampResponse")]
        System.Threading.Tasks.Task<int> UpdateAccessTimeStampAsync(string Session_Identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAccesData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAccesDataResponse")]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.AccessData GetAccesData(string Session_Identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAccesData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAccesDataResponse")]
        System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.AccessData> GetAccesDataAsync(string Session_Identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Count_Sessions", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Count_SessionsResponse")]
        int Count_Sessions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Count_Sessions", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Count_SessionsResponse")]
        System.Threading.Tasks.Task<int> Count_SessionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_Fontsize", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_FontsizeResponse")]
        bool Update_Fontsize(int MID, int Fontsize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_Fontsize", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_FontsizeResponse")]
        System.Threading.Tasks.Task<bool> Update_FontsizeAsync(int MID, int Fontsize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/PurgeTableLogging", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/PurgeTableLoggingResponse")]
        int PurgeTableLogging();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/PurgeTableLogging", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/PurgeTableLoggingResponse")]
        System.Threading.Tasks.Task<int> PurgeTableLoggingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/CTYtoRatingtype", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/CTYtoRatingtypeResponse")]
        int CTYtoRatingtype(int CTY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/CTYtoRatingtype", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/CTYtoRatingtypeResponse")]
        System.Threading.Tasks.Task<int> CTYtoRatingtypeAsync(int CTY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsentRounds", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsentRoundsResponse")]
        System.Data.DataSet GetAbsentRounds(int PID, int CompetitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsentRounds", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsentRoundsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAbsentRoundsAsync(int PID, int CompetitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetIntegrateWithCompetition", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetIntegrateWithCompetitionResponse")]
        int GetIntegrateWithCompetition(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetIntegrateWithCompetition", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetIntegrateWithCompetitionResponse")]
        System.Threading.Tasks.Task<int> GetIntegrateWithCompetitionAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Calculate_New_Pairing_Swiss", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Calculate_New_Pairing_SwissResponse")]
        void Calculate_New_Pairing_Swiss(int CID, int RNR, int GPR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Calculate_New_Pairing_Swiss", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Calculate_New_Pairing_SwissResponse")]
        System.Threading.Tasks.Task Calculate_New_Pairing_SwissAsync(int CID, int RNR, int GPR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_NoShow_From_Deelnemer_Competition", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_NoShow_From_Deelnemer_CompetitionR" +
            "esponse")]
        bool Remove_NoShow_From_Deelnemer_Competition(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_NoShow_From_Deelnemer_Competition", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_NoShow_From_Deelnemer_CompetitionR" +
            "esponse")]
        System.Threading.Tasks.Task<bool> Remove_NoShow_From_Deelnemer_CompetitionAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetResultsSwissGameList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetResultsSwissGameListResponse")]
        System.Data.DataSet GetResultsSwissGameList(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetResultsSwissGameList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetResultsSwissGameListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetResultsSwissGameListAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Swiss_Result_Records", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Swiss_Result_RecordsResponse")]
        void Create_Swiss_Result_Records(int CID, int RNR, int Games_Per_Round);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Swiss_Result_Records", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Swiss_Result_RecordsResponse")]
        System.Threading.Tasks.Task Create_Swiss_Result_RecordsAsync(int CID, int RNR, int Games_Per_Round);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabeticalOverviewInit", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabeticalOverviewInitResp" +
            "onse")]
        bool GetPlayerListAlphabeticalOverviewInit(int CompetitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabeticalOverviewInit", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabeticalOverviewInitResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> GetPlayerListAlphabeticalOverviewInitAsync(int CompetitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabeticalOverview", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabeticalOverviewResponse" +
            "")]
        System.Data.DataSet GetPlayerListAlphabeticalOverview(int CompetitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabeticalOverview", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabeticalOverviewResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPlayerListAlphabeticalOverviewAsync(int CompetitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/DeletePlayerListAlphabeticalOverview", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/DeletePlayerListAlphabeticalOverviewRespo" +
            "nse")]
        bool DeletePlayerListAlphabeticalOverview(int CompetitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/DeletePlayerListAlphabeticalOverview", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/DeletePlayerListAlphabeticalOverviewRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> DeletePlayerListAlphabeticalOverviewAsync(int CompetitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayerListAlphabeticalOverview", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayerListAlphabeticalOverviewRespo" +
            "nse")]
        bool UpdatePlayerListAlphabeticalOverview(int CompetitionId, int PID, string Mode, int YesNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayerListAlphabeticalOverview", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayerListAlphabeticalOverviewRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerListAlphabeticalOverviewAsync(int CompetitionId, int PID, string Mode, int YesNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GenerateHeaderFile", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GenerateHeaderFileResponse")]
        void GenerateHeaderFile(System.DateTime Next_Evening, string textpart, string Name, int CID, int RNR, string RootPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GenerateHeaderFile", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GenerateHeaderFileResponse")]
        System.Threading.Tasks.Task GenerateHeaderFileAsync(System.DateTime Next_Evening, string textpart, string Name, int CID, int RNR, string RootPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/ChampionsGroupGameNumber", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/ChampionsGroupGameNumberResponse")]
        int ChampionsGroupGameNumber(int WID, int BID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/ChampionsGroupGameNumber", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/ChampionsGroupGameNumberResponse")]
        System.Threading.Tasks.Task<int> ChampionsGroupGameNumberAsync(int WID, int BID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetOpenChampionsgroupGames", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetOpenChampionsgroupGamesResponse")]
        System.Data.DataSet GetOpenChampionsgroupGames(int WID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetOpenChampionsgroupGames", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetOpenChampionsgroupGamesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOpenChampionsgroupGamesAsync(int WID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGGamenrInThisRound", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGGamenrInThisRoundResponse")]
        int GetCGGamenrInThisRound(int PID, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGGamenrInThisRound", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGGamenrInThisRoundResponse")]
        System.Threading.Tasks.Task<int> GetCGGamenrInThisRoundAsync(int PID, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGPartnerInThisRound", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGPartnerInThisRoundResponse")]
        int GetCGPartnerInThisRound(int PID, int CID, int GameNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGPartnerInThisRound", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGPartnerInThisRoundResponse")]
        System.Threading.Tasks.Task<int> GetCGPartnerInThisRoundAsync(int PID, int CID, int GameNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListCompetitionOnly", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListCompetitionOnlyResponse")]
        System.Data.DataSet GetPlayerListCompetitionOnly(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListCompetitionOnly", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListCompetitionOnlyResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPlayerListCompetitionOnlyAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateChampionsGroupIndicator", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateChampionsGroupIndicatorResponse")]
        bool UpdateChampionsGroupIndicator(int PID, int Indicator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateChampionsGroupIndicator", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateChampionsGroupIndicatorResponse")]
        System.Threading.Tasks.Task<bool> UpdateChampionsGroupIndicatorAsync(int PID, int Indicator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/PlayerIsCG", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/PlayerIsCGResponse")]
        bool PlayerIsCG(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/PlayerIsCG", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/PlayerIsCGResponse")]
        System.Threading.Tasks.Task<bool> PlayerIsCGAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAlarmPanelData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAlarmPanelDataResponse")]
        System.Data.DataSet GetAlarmPanelData(string Manager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAlarmPanelData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAlarmPanelDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAlarmPanelDataAsync(string Manager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/CountUnhandledCriticalAlarms", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/CountUnhandledCriticalAlarmsResponse")]
        int CountUnhandledCriticalAlarms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/CountUnhandledCriticalAlarms", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/CountUnhandledCriticalAlarmsResponse")]
        System.Threading.Tasks.Task<int> CountUnhandledCriticalAlarmsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAlarmPanelIndicator", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAlarmPanelIndicatorResponse")]
        bool UpdateAlarmPanelIndicator(int Status, int Recordnr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAlarmPanelIndicator", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateAlarmPanelIndicatorResponse")]
        System.Threading.Tasks.Task<bool> UpdateAlarmPanelIndicatorAsync(int Status, int Recordnr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/SortMatrix", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/SortMatrixResponse")]
        bool SortMatrix(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/SortMatrix", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/SortMatrixResponse")]
        System.Threading.Tasks.Task<bool> SortMatrixAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCrossTableRow", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCrossTableRowResponse")]
        System.Data.DataSet GetCrossTableRow(int CID, int Row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCrossTableRow", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCrossTableRowResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCrossTableRowAsync(int CID, int Row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/IPEntryDenied", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/IPEntryDeniedResponse")]
        bool IPEntryDenied(string IPNumber, bool IsCrawler);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/IPEntryDenied", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/IPEntryDeniedResponse")]
        System.Threading.Tasks.Task<bool> IPEntryDeniedAsync(string IPNumber, bool IsCrawler);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/WriteLogExceptionTrace", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/WriteLogExceptionTraceResponse")]
        void WriteLogExceptionTrace(string User, int CID, string Module, string Level, int LevelValue, string TraceLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/WriteLogExceptionTrace", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/WriteLogExceptionTraceResponse")]
        System.Threading.Tasks.Task WriteLogExceptionTraceAsync(string User, int CID, string Module, string Level, int LevelValue, string TraceLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGTournamentIdFrom", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGTournamentIdFromResponse")]
        int GetCGTournamentIdFrom(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGTournamentIdFrom", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCGTournamentIdFromResponse")]
        System.Threading.Tasks.Task<int> GetCGTournamentIdFromAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/List_Free_Round_Players", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/List_Free_Round_PlayersResponse")]
        System.Data.DataSet List_Free_Round_Players(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/List_Free_Round_Players", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/List_Free_Round_PlayersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> List_Free_Round_PlayersAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/RemovePlayerStatusCalculated", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/RemovePlayerStatusCalculatedResponse")]
        void RemovePlayerStatusCalculated(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/RemovePlayerStatusCalculated", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/RemovePlayerStatusCalculatedResponse")]
        System.Threading.Tasks.Task RemovePlayerStatusCalculatedAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_Free_Round_Date", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_Free_Round_DateResponse")]
        void Update_Free_Round_Date(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_Free_Round_Date", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_Free_Round_DateResponse")]
        System.Threading.Tasks.Task Update_Free_Round_DateAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateMobileMessageIndicator", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateMobileMessageIndicatorResponse")]
        bool UpdateMobileMessageIndicator(int Status, int Recordnr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateMobileMessageIndicator", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateMobileMessageIndicatorResponse")]
        System.Threading.Tasks.Task<bool> UpdateMobileMessageIndicatorAsync(int Status, int Recordnr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetMobileMessageData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetMobileMessageDataResponse")]
        System.Data.DataSet GetMobileMessageData(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetMobileMessageData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetMobileMessageDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMobileMessageDataAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/CountUnhandledMobileMessages", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/CountUnhandledMobileMessagesResponse")]
        int CountUnhandledMobileMessages(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/CountUnhandledMobileMessages", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/CountUnhandledMobileMessagesResponse")]
        System.Threading.Tasks.Task<int> CountUnhandledMobileMessagesAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionManager", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionManagerResponse")]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.CompetitionManager GetCompetitionManager(string CompetitionManagerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionManager", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionManagerResponse")]
        System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.CompetitionManager> GetCompetitionManagerAsync(string CompetitionManagerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/SaveCompetitionManager", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/SaveCompetitionManagerResponse")]
        void SaveCompetitionManager(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.CompetitionManager CompetitionManager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/SaveCompetitionManager", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/SaveCompetitionManagerResponse")]
        System.Threading.Tasks.Task SaveCompetitionManagerAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.CompetitionManager CompetitionManager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionListResponse")]
        System.Data.DataSet GetCompetitionList(string CompetitionManagerName, int Manager_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompetitionListAsync(string CompetitionManagerName, int Manager_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetRoundNumber", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetRoundNumberResponse")]
        int GetRoundNumber(int CompetitieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetRoundNumber", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetRoundNumberResponse")]
        System.Threading.Tasks.Task<int> GetRoundNumberAsync(int CompetitieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetWorkFlowRecord", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetWorkFlowRecordResponse")]
        System.Data.DataSet GetWorkFlowRecord(int CompetitionManagerId, int RoundNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetWorkFlowRecord", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetWorkFlowRecordResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetWorkFlowRecordAsync(int CompetitionManagerId, int RoundNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberWithdrawn", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberWithdrawnResponse")]
        int GetNumberWithdrawn(int CompetitieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberWithdrawn", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberWithdrawnResponse")]
        System.Threading.Tasks.Task<int> GetNumberWithdrawnAsync(int CompetitieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberExternal", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberExternalResponse")]
        int GetNumberExternal(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberExternal", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberExternalResponse")]
        System.Threading.Tasks.Task<int> GetNumberExternalAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberAbsentees", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberAbsenteesResponse")]
        int GetNumberAbsentees(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberAbsentees", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberAbsenteesResponse")]
        System.Threading.Tasks.Task<int> GetNumberAbsenteesAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberTotal", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberTotalResponse")]
        int GetNumberTotal(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberTotal", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNumberTotalResponse")]
        System.Threading.Tasks.Task<int> GetNumberTotalAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListResponse")]
        System.Data.DataSet GetPlayerList(int CompetitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPlayerListAsync(int CompetitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllAdversariesStatistics", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllAdversariesStatisticsResponse")]
        System.Data.DataSet GetAllAdversariesStatistics(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllAdversariesStatistics", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllAdversariesStatisticsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllAdversariesStatisticsAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsenteeRegisterList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsenteeRegisterListResponse")]
        System.Data.DataSet GetAbsenteeRegisterList(int CompetitionId, int RoundNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsenteeRegisterList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsenteeRegisterListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAbsenteeRegisterListAsync(int CompetitionId, int RoundNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsenteeList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsenteeListResponse")]
        System.Data.DataSet GetAbsenteeList(int CompetitionId, int RoundNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsenteeList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAbsenteeListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAbsenteeListAsync(int CompetitionId, int RoundNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerName", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerNameResponse")]
        string GetPlayerName(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerName", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerNameResponse")]
        System.Threading.Tasks.Task<string> GetPlayerNameAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerFirstName", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerFirstNameResponse")]
        string GetPlayerFirstName(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerFirstName", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerFirstNameResponse")]
        System.Threading.Tasks.Task<string> GetPlayerFirstNameAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddAbsentee", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddAbsenteeResponse")]
        bool AddAbsentee(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.AbsenteeData Absentee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddAbsentee", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddAbsenteeResponse")]
        System.Threading.Tasks.Task<bool> AddAbsenteeAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.AbsenteeData Absentee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteAbsentees", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteAbsenteesResponse")]
        bool DeleteAbsentees(int CompetitieID, int RondeNummer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteAbsentees", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteAbsenteesResponse")]
        System.Threading.Tasks.Task<bool> DeleteAbsenteesAsync(int CompetitieID, int RondeNummer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_Workflow_Item", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_Workflow_ItemResponse")]
        bool Update_Workflow_Item(string Item_Name, int CID, int RNR, int Item_Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Update_Workflow_Item", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Update_Workflow_ItemResponse")]
        System.Threading.Tasks.Task<bool> Update_Workflow_ItemAsync(string Item_Name, int CID, int RNR, int Item_Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNoPlayCode", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNoPlayCodeResponse")]
        int GetNoPlayCode(int PID, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetNoPlayCode", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetNoPlayCodeResponse")]
        System.Threading.Tasks.Task<int> GetNoPlayCodeAsync(int PID, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBPlayerList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBPlayerListResponse")]
        System.Data.DataSet GetKNSBPlayerList(string Playername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBPlayerList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBPlayerListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetKNSBPlayerListAsync(string Playername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetFIDEPlayerList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetFIDEPlayerListResponse")]
        System.Data.DataSet GetFIDEPlayerList(string Playername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetFIDEPlayerList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetFIDEPlayerListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFIDEPlayerListAsync(string Playername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayer", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerResponse")]
        bool AddPlayer(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData Player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayer", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerResponse")]
        System.Threading.Tasks.Task<bool> AddPlayerAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData Player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerFullData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerFullDataResponse")]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData GetPlayerFullData(int Player, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerFullData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerFullDataResponse")]
        System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData> GetPlayerFullDataAsync(int Player, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayer", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayerResponse")]
        bool UpdatePlayer(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData Player, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayer", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayerResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData Player, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Initialize_New_Round", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Initialize_New_RoundResponse")]
        bool Initialize_New_Round(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Initialize_New_Round", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Initialize_New_RoundResponse")]
        System.Threading.Tasks.Task<bool> Initialize_New_RoundAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Calculate_New_Pairing", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Calculate_New_PairingResponse")]
        bool Calculate_New_Pairing(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Calculate_New_Pairing", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Calculate_New_PairingResponse")]
        System.Threading.Tasks.Task<bool> Calculate_New_PairingAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerStartCompetitionPoints", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerStartCompetitionPointsResponse")]
        float GetPlayerStartCompetitionPoints(int PID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerStartCompetitionPoints", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerStartCompetitionPointsResponse")]
        System.Threading.Tasks.Task<float> GetPlayerStartCompetitionPointsAsync(int PID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerStartRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerStartRatingResponse")]
        float GetPlayerStartRating(int PID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerStartRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerStartRatingResponse")]
        System.Threading.Tasks.Task<float> GetPlayerStartRatingAsync(int PID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerRatingInCompetition", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerRatingInCompetitionResponse")]
        float GetPlayerRatingInCompetition(int PID, int RNR, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerRatingInCompetition", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerRatingInCompetitionResponse")]
        System.Threading.Tasks.Task<float> GetPlayerRatingInCompetitionAsync(int PID, int RNR, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerPointsInCompetition", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerPointsInCompetitionResponse")]
        float GetPlayerPointsInCompetition(int PID, int RNR, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerPointsInCompetition", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerPointsInCompetitionResponse")]
        System.Threading.Tasks.Task<float> GetPlayerPointsInCompetitionAsync(int PID, int RNR, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Worklist", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Create_WorklistResponse")]
        void Create_Worklist(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Worklist", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Create_WorklistResponse")]
        System.Threading.Tasks.Task Create_WorklistAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetKroongroepPartijNummer", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetKroongroepPartijNummerResponse")]
        int GetKroongroepPartijNummer(int PID, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetKroongroepPartijNummer", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetKroongroepPartijNummerResponse")]
        System.Threading.Tasks.Task<int> GetKroongroepPartijNummerAsync(int PID, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetGameList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetGameListResponse")]
        System.Data.DataSet GetGameList(int CID, int RNR, int GameType, int Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetGameList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetGameListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetGameListAsync(int CID, int RNR, int GameType, int Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetStringFromAlgemeneInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetStringFromAlgemeneInfoResponse")]
        string GetStringFromAlgemeneInfo(int CID, string AttributeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetStringFromAlgemeneInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetStringFromAlgemeneInfoResponse")]
        System.Threading.Tasks.Task<string> GetStringFromAlgemeneInfoAsync(int CID, string AttributeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/FTP_Basis_Upload_File", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/FTP_Basis_Upload_FileResponse")]
        string FTP_Basis_Upload_File(string Display_Target, string App_Source, int CID, string File_Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/FTP_Basis_Upload_File", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/FTP_Basis_Upload_FileResponse")]
        System.Threading.Tasks.Task<string> FTP_Basis_Upload_FileAsync(string Display_Target, string App_Source, int CID, string File_Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetMailAddresses", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetMailAddressesResponse")]
        System.Data.DataSet GetMailAddresses(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetMailAddresses", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetMailAddressesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMailAddressesAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetOneGame", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetOneGameResponse")]
        System.Data.DataSet GetOneGame(int PID, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetOneGame", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetOneGameResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOneGameAsync(int PID, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetGamesUpdateList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetGamesUpdateListResponse")]
        System.Data.DataSet GetGamesUpdateList(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetGamesUpdateList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetGamesUpdateListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetGamesUpdateListAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddManualGame", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddManualGameResponse")]
        void AddManualGame(int PIDWhite, int PIDBlack, int CID, int RNR, int ChampionsgroupGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddManualGame", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddManualGameResponse")]
        System.Threading.Tasks.Task AddManualGameAsync(int PIDWhite, int PIDBlack, int CID, int RNR, int ChampionsgroupGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Games_From_List", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Games_From_ListResponse")]
        void Remove_Games_From_List(int PIDWhite, int PIDBlack, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Games_From_List", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Games_From_ListResponse")]
        System.Threading.Tasks.Task Remove_Games_From_ListAsync(int PIDWhite, int PIDBlack, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/IsPlayerInChampiongroup", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/IsPlayerInChampiongroupResponse")]
        bool IsPlayerInChampiongroup(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/IsPlayerInChampiongroup", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/IsPlayerInChampiongroupResponse")]
        System.Threading.Tasks.Task<bool> IsPlayerInChampiongroupAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetResultsGameList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetResultsGameListResponse")]
        System.Data.DataSet GetResultsGameList(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetResultsGameList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetResultsGameListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetResultsGameListAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateResult", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateResultResponse")]
        bool UpdateResult(int PID_White, int PID_Black, int CID, int RNR, int auxR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateResult", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateResultResponse")]
        System.Threading.Tasks.Task<bool> UpdateResultAsync(int PID_White, int PID_Black, int CID, int RNR, int auxR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AllResultsEntered", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AllResultsEnteredResponse")]
        bool AllResultsEntered(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AllResultsEntered", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AllResultsEnteredResponse")]
        System.Threading.Tasks.Task<bool> AllResultsEnteredAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteResults", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteResultsResponse")]
        bool DeleteResults(int CompetitieID, int RondeNummer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteResults", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteResultsResponse")]
        System.Threading.Tasks.Task<bool> DeleteResultsAsync(int CompetitieID, int RondeNummer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Result_Records", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Result_RecordsResponse")]
        void Create_Result_Records(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Result_Records", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Create_Result_RecordsResponse")]
        System.Threading.Tasks.Task Create_Result_RecordsAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AdministrationRatingData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AdministrationRatingDataResponse")]
        void AdministrationRatingData(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AdministrationRatingData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AdministrationRatingDataResponse")]
        System.Threading.Tasks.Task AdministrationRatingDataAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Templist", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_TemplistResponse")]
        bool Remove_Templist(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Templist", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_TemplistResponse")]
        System.Threading.Tasks.Task<bool> Remove_TemplistAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionRankingList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionRankingListResponse")]
        System.Data.DataSet GetCompetitionRankingList(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionRankingList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionRankingListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompetitionRankingListAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetMaxRounds", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetMaxRoundsResponse")]
        int GetMaxRounds(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetMaxRounds", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetMaxRoundsResponse")]
        System.Threading.Tasks.Task<int> GetMaxRoundsAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Count_Player_Absent", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Count_Player_AbsentResponse")]
        int Count_Player_Absent(int PID, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Count_Player_Absent", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Count_Player_AbsentResponse")]
        System.Threading.Tasks.Task<int> Count_Player_AbsentAsync(int PID, int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionGainRankingList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionGainRankingListResponse")]
        System.Data.DataSet GetCompetitionGainRankingList(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionGainRankingList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionGainRankingListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompetitionGainRankingListAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetELORankingList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetELORankingListResponse")]
        System.Data.DataSet GetELORankingList(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetELORankingList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetELORankingListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetELORankingListAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/ButtonAllowed", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/ButtonAllowedResponse")]
        int ButtonAllowed(string FunctionDescription, int Status, int Privileges);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/ButtonAllowed", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/ButtonAllowedResponse")]
        System.Threading.Tasks.Task<int> ButtonAllowedAsync(string FunctionDescription, int Status, int Privileges);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetIntFromAlgemeneInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetIntFromAlgemeneInfoResponse")]
        int GetIntFromAlgemeneInfo(int CID, string AttributeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetIntFromAlgemeneInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetIntFromAlgemeneInfoResponse")]
        System.Threading.Tasks.Task<int> GetIntFromAlgemeneInfoAsync(int CID, string AttributeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/SetIntInAlgemeneInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/SetIntInAlgemeneInfoResponse")]
        void SetIntInAlgemeneInfo(string Item_Name, int CID, int Item_Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/SetIntInAlgemeneInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/SetIntInAlgemeneInfoResponse")]
        System.Threading.Tasks.Task SetIntInAlgemeneInfoAsync(string Item_Name, int CID, int Item_Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabetical", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabeticalResponse")]
        System.Data.DataSet GetPlayerListAlphabetical(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabetical", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetPlayerListAlphabeticalResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPlayerListAlphabeticalAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetResults", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetResultsResponse")]
        System.Data.DataSet GetResults(int PID, int CID, int TC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetResults", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetResultsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetResultsAsync(int PID, int CID, int TC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateOneResult", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateOneResultResponse")]
        bool UpdateOneResult(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ResultData OneResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateOneResult", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateOneResultResponse")]
        System.Threading.Tasks.Task<bool> UpdateOneResultAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ResultData OneResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetGeneralInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetGeneralInfoResponse")]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GeneralInfo GetGeneralInfo(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetGeneralInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetGeneralInfoResponse")]
        System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GeneralInfo> GetGeneralInfoAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateGeneralInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateGeneralInfoResponse")]
        int UpdateGeneralInfo(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GeneralInfo gi, int ManagerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateGeneralInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateGeneralInfoResponse")]
        System.Threading.Tasks.Task<int> UpdateGeneralInfoAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GeneralInfo gi, int ManagerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetGeneralSwissInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetGeneralSwissInfoResponse")]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.General_Swiss_Info GetGeneralSwissInfo(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetGeneralSwissInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetGeneralSwissInfoResponse")]
        System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.General_Swiss_Info> GetGeneralSwissInfoAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateGeneralSwissInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateGeneralSwissInfoResponse")]
        int UpdateGeneralSwissInfo(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.General_Swiss_Info gi, int ManagerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateGeneralSwissInfo", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateGeneralSwissInfoResponse")]
        System.Threading.Tasks.Task<int> UpdateGeneralSwissInfoAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.General_Swiss_Info gi, int ManagerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteDeelnemerCompetitieRecords", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteDeelnemerCompetitieRecordsResponse")]
        bool DeleteDeelnemerCompetitieRecords(int CID, int CIDOld);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteDeelnemerCompetitieRecords", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/DeleteDeelnemerCompetitieRecordsResponse")]
        System.Threading.Tasks.Task<bool> DeleteDeelnemerCompetitieRecordsAsync(int CID, int CIDOld);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerCompetitionRecord", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerCompetitionRecordResponse")]
        bool AddPlayerCompetitionRecord(int CID, int PID, float CPS, float ELO, int COT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerCompetitionRecord", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerCompetitionRecordResponse")]
        System.Threading.Tasks.Task<bool> AddPlayerCompetitionRecordAsync(int CID, int PID, float CPS, float ELO, int COT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayerTeam", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayerTeamResponse")]
        bool UpdatePlayerTeam(int PID, int Team, string Association_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayerTeam", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdatePlayerTeamResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerTeamAsync(int PID, int Team, string Association_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupPlayerList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupPlayerListResponse")]
        System.Data.DataSet GetChampionsgroupPlayerList(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupPlayerList", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupPlayerListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetChampionsgroupPlayerListAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateChampionsGroupPlayer", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateChampionsGroupPlayerResponse")]
        bool UpdateChampionsGroupPlayer(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ChampionsgroupData OnePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateChampionsGroupPlayer", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateChampionsGroupPlayerResponse")]
        System.Threading.Tasks.Task<bool> UpdateChampionsGroupPlayerAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ChampionsgroupData OnePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerRoundRobinRecord", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerRoundRobinRecordResponse")]
        bool AddPlayerRoundRobinRecord(int CID, int RNR, int GNR, int PID, int ADV, int COL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerRoundRobinRecord", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerRoundRobinRecordResponse")]
        System.Threading.Tasks.Task<bool> AddPlayerRoundRobinRecordAsync(int CID, int RNR, int GNR, int PID, int ADV, int COL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_RoundRobin", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_RoundRobinResponse")]
        bool Remove_RoundRobin(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_RoundRobin", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_RoundRobinResponse")]
        System.Threading.Tasks.Task<bool> Remove_RoundRobinAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Upgrade_ChampionsgroupPoints", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Upgrade_ChampionsgroupPointsResponse")]
        void Upgrade_ChampionsgroupPoints(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Upgrade_ChampionsgroupPoints", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Upgrade_ChampionsgroupPointsResponse")]
        System.Threading.Tasks.Task Upgrade_ChampionsgroupPointsAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetRoundRobinData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetRoundRobinDataResponse")]
        System.Data.DataSet GetRoundRobinData(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetRoundRobinData", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetRoundRobinDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRoundRobinDataAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupMatchpoint", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupMatchpointResponse")]
        float GetChampionsgroupMatchpoint(int PID, int ADV, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupMatchpoint", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetChampionsgroupMatchpointResponse")]
        System.Threading.Tasks.Task<float> GetChampionsgroupMatchpointAsync(int PID, int ADV, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllOtherPlayersAlphabetical", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllOtherPlayersAlphabeticalResponse")]
        System.Data.DataSet GetAllOtherPlayersAlphabetical(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllOtherPlayersAlphabetical", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetAllOtherPlayersAlphabeticalResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllOtherPlayersAlphabeticalAsync(int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Player_From_CompetitionRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Player_From_CompetitionRatingRespo" +
            "nse")]
        void Remove_Player_From_CompetitionRating(int PID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Player_From_CompetitionRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_Player_From_CompetitionRatingRespo" +
            "nse")]
        System.Threading.Tasks.Task Remove_Player_From_CompetitionRatingAsync(int PID, int CID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetClubRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetClubRatingResponse")]
        float GetClubRating(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetClubRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetClubRatingResponse")]
        System.Threading.Tasks.Task<float> GetClubRatingAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBRatingResponse")]
        float GetKNSBRating(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBRating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetKNSBRatingResponse")]
        System.Threading.Tasks.Task<float> GetKNSBRatingAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetFIDERating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetFIDERatingResponse")]
        float GetFIDERating(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetFIDERating", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetFIDERatingResponse")]
        System.Threading.Tasks.Task<float> GetFIDERatingAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionPoints", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionPointsResponse")]
        float GetCompetitionPoints(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionPoints", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/GetCompetitionPointsResponse")]
        System.Threading.Tasks.Task<float> GetCompetitionPointsAsync(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/WriteLogLine", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/WriteLogLineResponse")]
        void WriteLogLine(string User, int CID, string Module, string Level, int LevelValue, string LogLine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/WriteLogLine", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/WriteLogLineResponse")]
        System.Threading.Tasks.Task WriteLogLineAsync(string User, int CID, string Module, string Level, int LevelValue, string LogLine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/PlayerHasResults", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/PlayerHasResultsResponse")]
        bool PlayerHasResults(int CID, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/PlayerHasResults", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/PlayerHasResultsResponse")]
        System.Threading.Tasks.Task<bool> PlayerHasResultsAsync(int CID, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/DeletePlayerCompetitionRecord", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/DeletePlayerCompetitionRecordResponse")]
        bool DeletePlayerCompetitionRecord(int CID, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/DeletePlayerCompetitionRecord", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/DeletePlayerCompetitionRecordResponse")]
        System.Threading.Tasks.Task<bool> DeletePlayerCompetitionRecordAsync(int CID, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_BlitzResults", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_BlitzResultsResponse")]
        bool Remove_BlitzResults(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_BlitzResults", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/Remove_BlitzResultsResponse")]
        System.Threading.Tasks.Task<bool> Remove_BlitzResultsAsync(int CID, int RNR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerBlitzResultInit", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerBlitzResultInitResponse")]
        bool AddPlayerBlitzResultInit(int CID, int RNR, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerBlitzResultInit", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/AddPlayerBlitzResultInitResponse")]
        System.Threading.Tasks.Task<bool> AddPlayerBlitzResultInitAsync(int CID, int RNR, int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateOneBlitzResult", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateOneBlitzResultResponse")]
        bool UpdateOneBlitzResult(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.BlitzResultData OneBlitzResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateOneBlitzResult", ReplyAction="http://tempuri.org/ITSGS_CS_WCF_Service/UpdateOneBlitzResultResponse")]
        System.Threading.Tasks.Task<bool> UpdateOneBlitzResultAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.BlitzResultData OneBlitzResult);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateInteger", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateIntegerRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Inputfield;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool emptyAllowed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int Default;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public bool Bounded;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int Minimum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int Maximum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int InputValue;
        
        public ValidateIntegerRequest() {
        }
        
        public ValidateIntegerRequest(string Inputfield, bool emptyAllowed, int Default, bool Bounded, int Minimum, int Maximum, int InputValue) {
            this.Inputfield = Inputfield;
            this.emptyAllowed = emptyAllowed;
            this.Default = Default;
            this.Bounded = Bounded;
            this.Minimum = Minimum;
            this.Maximum = Maximum;
            this.InputValue = InputValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateIntegerResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateIntegerResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int ValidateIntegerResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int InputValue;
        
        public ValidateIntegerResponse() {
        }
        
        public ValidateIntegerResponse(int ValidateIntegerResult, int InputValue) {
            this.ValidateIntegerResult = ValidateIntegerResult;
            this.InputValue = InputValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateReal", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateRealRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Inputfield;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool emptyAllowed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public double Default;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public bool Bounded;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public double Minimum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public double Maximum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public double InputValue;
        
        public ValidateRealRequest() {
        }
        
        public ValidateRealRequest(string Inputfield, bool emptyAllowed, double Default, bool Bounded, double Minimum, double Maximum, double InputValue) {
            this.Inputfield = Inputfield;
            this.emptyAllowed = emptyAllowed;
            this.Default = Default;
            this.Bounded = Bounded;
            this.Minimum = Minimum;
            this.Maximum = Maximum;
            this.InputValue = InputValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateRealResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateRealResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int ValidateRealResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public double InputValue;
        
        public ValidateRealResponse() {
        }
        
        public ValidateRealResponse(int ValidateRealResult, double InputValue) {
            this.ValidateRealResult = ValidateRealResult;
            this.InputValue = InputValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateString", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateStringRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Inputfield;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool emptyAllowed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string Default;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string InputValue;
        
        public ValidateStringRequest() {
        }
        
        public ValidateStringRequest(string Inputfield, bool emptyAllowed, string Default, string InputValue) {
            this.Inputfield = Inputfield;
            this.emptyAllowed = emptyAllowed;
            this.Default = Default;
            this.InputValue = InputValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateStringResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateStringResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int ValidateStringResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string InputValue;
        
        public ValidateStringResponse() {
        }
        
        public ValidateStringResponse(int ValidateStringResult, string InputValue) {
            this.ValidateStringResult = ValidateStringResult;
            this.InputValue = InputValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITSGS_CS_WCF_ServiceChannel : TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ITSGS_CS_WCF_Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TSGS_CS_WCF_ServiceClient : System.ServiceModel.ClientBase<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ITSGS_CS_WCF_Service>, TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ITSGS_CS_WCF_Service {
        
        public TSGS_CS_WCF_ServiceClient() {
        }
        
        public TSGS_CS_WCF_ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TSGS_CS_WCF_ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TSGS_CS_WCF_ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TSGS_CS_WCF_ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetPlayersBlitz(int CID, int RNR) {
            return base.Channel.GetPlayersBlitz(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPlayersBlitzAsync(int CID, int RNR) {
            return base.Channel.GetPlayersBlitzAsync(CID, RNR);
        }
        
        public float GetClubBlitzRating(int PID) {
            return base.Channel.GetClubBlitzRating(PID);
        }
        
        public System.Threading.Tasks.Task<float> GetClubBlitzRatingAsync(int PID) {
            return base.Channel.GetClubBlitzRatingAsync(PID);
        }
        
        public float GetKFactor(int CID) {
            return base.Channel.GetKFactor(CID);
        }
        
        public System.Threading.Tasks.Task<float> GetKFactorAsync(int CID) {
            return base.Channel.GetKFactorAsync(CID);
        }
        
        public float GetAcceleration(int CID) {
            return base.Channel.GetAcceleration(CID);
        }
        
        public System.Threading.Tasks.Task<float> GetAccelerationAsync(int CID) {
            return base.Channel.GetAccelerationAsync(CID);
        }
        
        public bool SaveBlitzRating(int PID, float Rating, int CID, int RNR) {
            return base.Channel.SaveBlitzRating(PID, Rating, CID, RNR);
        }
        
        public System.Threading.Tasks.Task<bool> SaveBlitzRatingAsync(int PID, float Rating, int CID, int RNR) {
            return base.Channel.SaveBlitzRatingAsync(PID, Rating, CID, RNR);
        }
        
        public bool Remove_RatingRound(int CID, int RNR) {
            return base.Channel.Remove_RatingRound(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<bool> Remove_RatingRoundAsync(int CID, int RNR) {
            return base.Channel.Remove_RatingRoundAsync(CID, RNR);
        }
        
        public System.Data.DataSet GetBlitzRatingRanking() {
            return base.Channel.GetBlitzRatingRanking();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBlitzRatingRankingAsync() {
            return base.Channel.GetBlitzRatingRankingAsync();
        }
        
        public System.Data.DataSet GetPlayersUniqueBlitz(int CID) {
            return base.Channel.GetPlayersUniqueBlitz(CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPlayersUniqueBlitzAsync(int CID) {
            return base.Channel.GetPlayersUniqueBlitzAsync(CID);
        }
        
        public float GetBlitzPenaltyPointsCleaned(int CID, int PID) {
            return base.Channel.GetBlitzPenaltyPointsCleaned(CID, PID);
        }
        
        public System.Threading.Tasks.Task<float> GetBlitzPenaltyPointsCleanedAsync(int CID, int PID) {
            return base.Channel.GetBlitzPenaltyPointsCleanedAsync(CID, PID);
        }
        
        public float GetBlitzPenaltyPoints(int CID, int PID) {
            return base.Channel.GetBlitzPenaltyPoints(CID, PID);
        }
        
        public System.Threading.Tasks.Task<float> GetBlitzPenaltyPointsAsync(int CID, int PID) {
            return base.Channel.GetBlitzPenaltyPointsAsync(CID, PID);
        }
        
        public System.Data.DataSet GetBlitzDisplayPoints(int CID, int PID) {
            return base.Channel.GetBlitzDisplayPoints(CID, PID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBlitzDisplayPointsAsync(int CID, int PID) {
            return base.Channel.GetBlitzDisplayPointsAsync(CID, PID);
        }
        
        public int GetKNSBNumber(int PID) {
            return base.Channel.GetKNSBNumber(PID);
        }
        
        public System.Threading.Tasks.Task<int> GetKNSBNumberAsync(int PID) {
            return base.Channel.GetKNSBNumberAsync(PID);
        }
        
        public string MakeImageSourceData(byte[] bytes) {
            return base.Channel.MakeImageSourceData(bytes);
        }
        
        public System.Threading.Tasks.Task<string> MakeImageSourceDataAsync(byte[] bytes) {
            return base.Channel.MakeImageSourceDataAsync(bytes);
        }
        
        public string StringImage(int PID, int CID) {
            return base.Channel.StringImage(PID, CID);
        }
        
        public System.Threading.Tasks.Task<string> StringImageAsync(int PID, int CID) {
            return base.Channel.StringImageAsync(PID, CID);
        }
        
        public byte[] GetPlayerProfilePictureFile(int PID) {
            return base.Channel.GetPlayerProfilePictureFile(PID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPlayerProfilePictureFileAsync(int PID) {
            return base.Channel.GetPlayerProfilePictureFileAsync(PID);
        }
        
        public byte[] GetNoPictureFile(int CID) {
            return base.Channel.GetNoPictureFile(CID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetNoPictureFileAsync(int CID) {
            return base.Channel.GetNoPictureFileAsync(CID);
        }
        
        public System.Data.DataSet GetTeamData(string Association) {
            return base.Channel.GetTeamData(Association);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTeamDataAsync(string Association) {
            return base.Channel.GetTeamDataAsync(Association);
        }
        
        public System.Data.DataSet GetTeamPlayers(string Association) {
            return base.Channel.GetTeamPlayers(Association);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTeamPlayersAsync(string Association) {
            return base.Channel.GetTeamPlayersAsync(Association);
        }
        
        public bool RemoveTeam(string VER, int Team_Record_Nummer) {
            return base.Channel.RemoveTeam(VER, Team_Record_Nummer);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTeamAsync(string VER, int Team_Record_Nummer) {
            return base.Channel.RemoveTeamAsync(VER, Team_Record_Nummer);
        }
        
        public bool UpdateTeam(string VER, int Team_nr, string URL, string Teamnaam, int Team_Record_Nummer) {
            return base.Channel.UpdateTeam(VER, Team_nr, URL, Teamnaam, Team_Record_Nummer);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTeamAsync(string VER, int Team_nr, string URL, string Teamnaam, int Team_Record_Nummer) {
            return base.Channel.UpdateTeamAsync(VER, Team_nr, URL, Teamnaam, Team_Record_Nummer);
        }
        
        public bool AddTeam(string VER, string URL, string Teamnaam, int Team_nr) {
            return base.Channel.AddTeam(VER, URL, Teamnaam, Team_nr);
        }
        
        public System.Threading.Tasks.Task<bool> AddTeamAsync(string VER, string URL, string Teamnaam, int Team_nr) {
            return base.Channel.AddTeamAsync(VER, URL, Teamnaam, Team_nr);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerResponse TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ITSGS_CS_WCF_Service.ValidateInteger(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerRequest request) {
            return base.Channel.ValidateInteger(request);
        }
        
        public int ValidateInteger(string Inputfield, bool emptyAllowed, int Default, bool Bounded, int Minimum, int Maximum, ref int InputValue) {
            TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerRequest inValue = new TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerRequest();
            inValue.Inputfield = Inputfield;
            inValue.emptyAllowed = emptyAllowed;
            inValue.Default = Default;
            inValue.Bounded = Bounded;
            inValue.Minimum = Minimum;
            inValue.Maximum = Maximum;
            inValue.InputValue = InputValue;
            TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerResponse retVal = ((TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ITSGS_CS_WCF_Service)(this)).ValidateInteger(inValue);
            InputValue = retVal.InputValue;
            return retVal.ValidateIntegerResult;
        }
        
        public System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerResponse> ValidateIntegerAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateIntegerRequest request) {
            return base.Channel.ValidateIntegerAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealResponse TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ITSGS_CS_WCF_Service.ValidateReal(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealRequest request) {
            return base.Channel.ValidateReal(request);
        }
        
        public int ValidateReal(string Inputfield, bool emptyAllowed, double Default, bool Bounded, double Minimum, double Maximum, ref double InputValue) {
            TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealRequest inValue = new TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealRequest();
            inValue.Inputfield = Inputfield;
            inValue.emptyAllowed = emptyAllowed;
            inValue.Default = Default;
            inValue.Bounded = Bounded;
            inValue.Minimum = Minimum;
            inValue.Maximum = Maximum;
            inValue.InputValue = InputValue;
            TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealResponse retVal = ((TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ITSGS_CS_WCF_Service)(this)).ValidateReal(inValue);
            InputValue = retVal.InputValue;
            return retVal.ValidateRealResult;
        }
        
        public System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealResponse> ValidateRealAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateRealRequest request) {
            return base.Channel.ValidateRealAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringResponse TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ITSGS_CS_WCF_Service.ValidateString(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringRequest request) {
            return base.Channel.ValidateString(request);
        }
        
        public int ValidateString(string Inputfield, bool emptyAllowed, string Default, ref string InputValue) {
            TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringRequest inValue = new TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringRequest();
            inValue.Inputfield = Inputfield;
            inValue.emptyAllowed = emptyAllowed;
            inValue.Default = Default;
            inValue.InputValue = InputValue;
            TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringResponse retVal = ((TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ITSGS_CS_WCF_Service)(this)).ValidateString(inValue);
            InputValue = retVal.InputValue;
            return retVal.ValidateStringResult;
        }
        
        public System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringResponse> ValidateStringAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ValidateStringRequest request) {
            return base.Channel.ValidateStringAsync(request);
        }
        
        public bool Remove_Round_Information(int CID, int RNR) {
            return base.Channel.Remove_Round_Information(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<bool> Remove_Round_InformationAsync(int CID, int RNR) {
            return base.Channel.Remove_Round_InformationAsync(CID, RNR);
        }
        
        public int Get_Workflow_Item(string Item_Name, int CID, int RNR) {
            return base.Channel.Get_Workflow_Item(Item_Name, CID, RNR);
        }
        
        public System.Threading.Tasks.Task<int> Get_Workflow_ItemAsync(string Item_Name, int CID, int RNR) {
            return base.Channel.Get_Workflow_ItemAsync(Item_Name, CID, RNR);
        }
        
        public System.Data.DataSet GetPlayersWithByeList(int CID) {
            return base.Channel.GetPlayersWithByeList(CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPlayersWithByeListAsync(int CID) {
            return base.Channel.GetPlayersWithByeListAsync(CID);
        }
        
        public System.Data.DataSet GetRetentionStatistics(int CID, int RNR) {
            return base.Channel.GetRetentionStatistics(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRetentionStatisticsAsync(int CID, int RNR) {
            return base.Channel.GetRetentionStatisticsAsync(CID, RNR);
        }
        
        public bool Update_National_Ratingtable(string Filename) {
            return base.Channel.Update_National_Ratingtable(Filename);
        }
        
        public System.Threading.Tasks.Task<bool> Update_National_RatingtableAsync(string Filename) {
            return base.Channel.Update_National_RatingtableAsync(Filename);
        }
        
        public bool Update_FIDE_Ratingtable(string Filename) {
            return base.Channel.Update_FIDE_Ratingtable(Filename);
        }
        
        public System.Threading.Tasks.Task<bool> Update_FIDE_RatingtableAsync(string Filename) {
            return base.Channel.Update_FIDE_RatingtableAsync(Filename);
        }
        
        public System.Data.DataSet GetUniquePlayers() {
            return base.Channel.GetUniquePlayers();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUniquePlayersAsync() {
            return base.Channel.GetUniquePlayersAsync();
        }
        
        public bool Update_KNSB_and_FIDE_Ratings(int PID, int KNSB, int FIDE) {
            return base.Channel.Update_KNSB_and_FIDE_Ratings(PID, KNSB, FIDE);
        }
        
        public System.Threading.Tasks.Task<bool> Update_KNSB_and_FIDE_RatingsAsync(int PID, int KNSB, int FIDE) {
            return base.Channel.Update_KNSB_and_FIDE_RatingsAsync(PID, KNSB, FIDE);
        }
        
        public bool PrepareBlitzRanking(int CID) {
            return base.Channel.PrepareBlitzRanking(CID);
        }
        
        public System.Threading.Tasks.Task<bool> PrepareBlitzRankingAsync(int CID) {
            return base.Channel.PrepareBlitzRankingAsync(CID);
        }
        
        public System.Data.DataSet GetChampionsgroupSchedule(int CID) {
            return base.Channel.GetChampionsgroupSchedule(CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetChampionsgroupScheduleAsync(int CID) {
            return base.Channel.GetChampionsgroupScheduleAsync(CID);
        }
        
        public int GetLastPlayerID() {
            return base.Channel.GetLastPlayerID();
        }
        
        public System.Threading.Tasks.Task<int> GetLastPlayerIDAsync() {
            return base.Channel.GetLastPlayerIDAsync();
        }
        
        public bool AddGame(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GamesData OneGame) {
            return base.Channel.AddGame(OneGame);
        }
        
        public System.Threading.Tasks.Task<bool> AddGameAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GamesData OneGame) {
            return base.Channel.AddGameAsync(OneGame);
        }
        
        public System.Data.DataSet GetStateDescriptions(int TC) {
            return base.Channel.GetStateDescriptions(TC);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStateDescriptionsAsync(int TC) {
            return base.Channel.GetStateDescriptionsAsync(TC);
        }
        
        public System.Data.DataSet GetCompetitionTypes(int TC) {
            return base.Channel.GetCompetitionTypes(TC);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompetitionTypesAsync(int TC) {
            return base.Channel.GetCompetitionTypesAsync(TC);
        }
        
        public int GetCompetitionType(int CID) {
            return base.Channel.GetCompetitionType(CID);
        }
        
        public System.Threading.Tasks.Task<int> GetCompetitionTypeAsync(int CID) {
            return base.Channel.GetCompetitionTypeAsync(CID);
        }
        
        public bool Remove_Work_Images(string workmap) {
            return base.Channel.Remove_Work_Images(workmap);
        }
        
        public System.Threading.Tasks.Task<bool> Remove_Work_ImagesAsync(string workmap) {
            return base.Channel.Remove_Work_ImagesAsync(workmap);
        }
        
        public bool Remove_Obsolete_Players() {
            return base.Channel.Remove_Obsolete_Players();
        }
        
        public System.Threading.Tasks.Task<bool> Remove_Obsolete_PlayersAsync() {
            return base.Channel.Remove_Obsolete_PlayersAsync();
        }
        
        public bool Remove_One_Competition(int CID) {
            return base.Channel.Remove_One_Competition(CID);
        }
        
        public System.Threading.Tasks.Task<bool> Remove_One_CompetitionAsync(int CID) {
            return base.Channel.Remove_One_CompetitionAsync(CID);
        }
        
        public bool Create_Backup(string BackUpString) {
            return base.Channel.Create_Backup(BackUpString);
        }
        
        public System.Threading.Tasks.Task<bool> Create_BackupAsync(string BackUpString) {
            return base.Channel.Create_BackupAsync(BackUpString);
        }
        
        public System.Data.DataSet GetAllOccurrencesOfOneGame(int PID, int AID) {
            return base.Channel.GetAllOccurrencesOfOneGame(PID, AID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllOccurrencesOfOneGameAsync(int PID, int AID) {
            return base.Channel.GetAllOccurrencesOfOneGameAsync(PID, AID);
        }
        
        public int UpdateAccessUser(string Session_Identification, string User) {
            return base.Channel.UpdateAccessUser(Session_Identification, User);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccessUserAsync(string Session_Identification, string User) {
            return base.Channel.UpdateAccessUserAsync(Session_Identification, User);
        }
        
        public int UpdateAccessNumber(string Session_Identification, string Manager_Identification, int UpdateNumber) {
            return base.Channel.UpdateAccessNumber(Session_Identification, Manager_Identification, UpdateNumber);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccessNumberAsync(string Session_Identification, string Manager_Identification, int UpdateNumber) {
            return base.Channel.UpdateAccessNumberAsync(Session_Identification, Manager_Identification, UpdateNumber);
        }
        
        public int UpdateAccessTimeStamp(string Session_Identification) {
            return base.Channel.UpdateAccessTimeStamp(Session_Identification);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccessTimeStampAsync(string Session_Identification) {
            return base.Channel.UpdateAccessTimeStampAsync(Session_Identification);
        }
        
        public TSGS_CS_Login_Client.TSGS_CS_WCF_Service.AccessData GetAccesData(string Session_Identification) {
            return base.Channel.GetAccesData(Session_Identification);
        }
        
        public System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.AccessData> GetAccesDataAsync(string Session_Identification) {
            return base.Channel.GetAccesDataAsync(Session_Identification);
        }
        
        public int Count_Sessions() {
            return base.Channel.Count_Sessions();
        }
        
        public System.Threading.Tasks.Task<int> Count_SessionsAsync() {
            return base.Channel.Count_SessionsAsync();
        }
        
        public bool Update_Fontsize(int MID, int Fontsize) {
            return base.Channel.Update_Fontsize(MID, Fontsize);
        }
        
        public System.Threading.Tasks.Task<bool> Update_FontsizeAsync(int MID, int Fontsize) {
            return base.Channel.Update_FontsizeAsync(MID, Fontsize);
        }
        
        public int PurgeTableLogging() {
            return base.Channel.PurgeTableLogging();
        }
        
        public System.Threading.Tasks.Task<int> PurgeTableLoggingAsync() {
            return base.Channel.PurgeTableLoggingAsync();
        }
        
        public int CTYtoRatingtype(int CTY) {
            return base.Channel.CTYtoRatingtype(CTY);
        }
        
        public System.Threading.Tasks.Task<int> CTYtoRatingtypeAsync(int CTY) {
            return base.Channel.CTYtoRatingtypeAsync(CTY);
        }
        
        public System.Data.DataSet GetAbsentRounds(int PID, int CompetitionId) {
            return base.Channel.GetAbsentRounds(PID, CompetitionId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAbsentRoundsAsync(int PID, int CompetitionId) {
            return base.Channel.GetAbsentRoundsAsync(PID, CompetitionId);
        }
        
        public int GetIntegrateWithCompetition(int CID) {
            return base.Channel.GetIntegrateWithCompetition(CID);
        }
        
        public System.Threading.Tasks.Task<int> GetIntegrateWithCompetitionAsync(int CID) {
            return base.Channel.GetIntegrateWithCompetitionAsync(CID);
        }
        
        public void Calculate_New_Pairing_Swiss(int CID, int RNR, int GPR) {
            base.Channel.Calculate_New_Pairing_Swiss(CID, RNR, GPR);
        }
        
        public System.Threading.Tasks.Task Calculate_New_Pairing_SwissAsync(int CID, int RNR, int GPR) {
            return base.Channel.Calculate_New_Pairing_SwissAsync(CID, RNR, GPR);
        }
        
        public bool Remove_NoShow_From_Deelnemer_Competition(int CID, int RNR) {
            return base.Channel.Remove_NoShow_From_Deelnemer_Competition(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<bool> Remove_NoShow_From_Deelnemer_CompetitionAsync(int CID, int RNR) {
            return base.Channel.Remove_NoShow_From_Deelnemer_CompetitionAsync(CID, RNR);
        }
        
        public System.Data.DataSet GetResultsSwissGameList(int CID, int RNR) {
            return base.Channel.GetResultsSwissGameList(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetResultsSwissGameListAsync(int CID, int RNR) {
            return base.Channel.GetResultsSwissGameListAsync(CID, RNR);
        }
        
        public void Create_Swiss_Result_Records(int CID, int RNR, int Games_Per_Round) {
            base.Channel.Create_Swiss_Result_Records(CID, RNR, Games_Per_Round);
        }
        
        public System.Threading.Tasks.Task Create_Swiss_Result_RecordsAsync(int CID, int RNR, int Games_Per_Round) {
            return base.Channel.Create_Swiss_Result_RecordsAsync(CID, RNR, Games_Per_Round);
        }
        
        public bool GetPlayerListAlphabeticalOverviewInit(int CompetitionId) {
            return base.Channel.GetPlayerListAlphabeticalOverviewInit(CompetitionId);
        }
        
        public System.Threading.Tasks.Task<bool> GetPlayerListAlphabeticalOverviewInitAsync(int CompetitionId) {
            return base.Channel.GetPlayerListAlphabeticalOverviewInitAsync(CompetitionId);
        }
        
        public System.Data.DataSet GetPlayerListAlphabeticalOverview(int CompetitionId) {
            return base.Channel.GetPlayerListAlphabeticalOverview(CompetitionId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPlayerListAlphabeticalOverviewAsync(int CompetitionId) {
            return base.Channel.GetPlayerListAlphabeticalOverviewAsync(CompetitionId);
        }
        
        public bool DeletePlayerListAlphabeticalOverview(int CompetitionId) {
            return base.Channel.DeletePlayerListAlphabeticalOverview(CompetitionId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlayerListAlphabeticalOverviewAsync(int CompetitionId) {
            return base.Channel.DeletePlayerListAlphabeticalOverviewAsync(CompetitionId);
        }
        
        public bool UpdatePlayerListAlphabeticalOverview(int CompetitionId, int PID, string Mode, int YesNo) {
            return base.Channel.UpdatePlayerListAlphabeticalOverview(CompetitionId, PID, Mode, YesNo);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerListAlphabeticalOverviewAsync(int CompetitionId, int PID, string Mode, int YesNo) {
            return base.Channel.UpdatePlayerListAlphabeticalOverviewAsync(CompetitionId, PID, Mode, YesNo);
        }
        
        public void GenerateHeaderFile(System.DateTime Next_Evening, string textpart, string Name, int CID, int RNR, string RootPath) {
            base.Channel.GenerateHeaderFile(Next_Evening, textpart, Name, CID, RNR, RootPath);
        }
        
        public System.Threading.Tasks.Task GenerateHeaderFileAsync(System.DateTime Next_Evening, string textpart, string Name, int CID, int RNR, string RootPath) {
            return base.Channel.GenerateHeaderFileAsync(Next_Evening, textpart, Name, CID, RNR, RootPath);
        }
        
        public int ChampionsGroupGameNumber(int WID, int BID, int CID) {
            return base.Channel.ChampionsGroupGameNumber(WID, BID, CID);
        }
        
        public System.Threading.Tasks.Task<int> ChampionsGroupGameNumberAsync(int WID, int BID, int CID) {
            return base.Channel.ChampionsGroupGameNumberAsync(WID, BID, CID);
        }
        
        public System.Data.DataSet GetOpenChampionsgroupGames(int WID, int CID) {
            return base.Channel.GetOpenChampionsgroupGames(WID, CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOpenChampionsgroupGamesAsync(int WID, int CID) {
            return base.Channel.GetOpenChampionsgroupGamesAsync(WID, CID);
        }
        
        public int GetCGGamenrInThisRound(int PID, int CID, int RNR) {
            return base.Channel.GetCGGamenrInThisRound(PID, CID, RNR);
        }
        
        public System.Threading.Tasks.Task<int> GetCGGamenrInThisRoundAsync(int PID, int CID, int RNR) {
            return base.Channel.GetCGGamenrInThisRoundAsync(PID, CID, RNR);
        }
        
        public int GetCGPartnerInThisRound(int PID, int CID, int GameNr) {
            return base.Channel.GetCGPartnerInThisRound(PID, CID, GameNr);
        }
        
        public System.Threading.Tasks.Task<int> GetCGPartnerInThisRoundAsync(int PID, int CID, int GameNr) {
            return base.Channel.GetCGPartnerInThisRoundAsync(PID, CID, GameNr);
        }
        
        public System.Data.DataSet GetPlayerListCompetitionOnly(int CID) {
            return base.Channel.GetPlayerListCompetitionOnly(CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPlayerListCompetitionOnlyAsync(int CID) {
            return base.Channel.GetPlayerListCompetitionOnlyAsync(CID);
        }
        
        public bool UpdateChampionsGroupIndicator(int PID, int Indicator) {
            return base.Channel.UpdateChampionsGroupIndicator(PID, Indicator);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateChampionsGroupIndicatorAsync(int PID, int Indicator) {
            return base.Channel.UpdateChampionsGroupIndicatorAsync(PID, Indicator);
        }
        
        public bool PlayerIsCG(int PID) {
            return base.Channel.PlayerIsCG(PID);
        }
        
        public System.Threading.Tasks.Task<bool> PlayerIsCGAsync(int PID) {
            return base.Channel.PlayerIsCGAsync(PID);
        }
        
        public System.Data.DataSet GetAlarmPanelData(string Manager) {
            return base.Channel.GetAlarmPanelData(Manager);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAlarmPanelDataAsync(string Manager) {
            return base.Channel.GetAlarmPanelDataAsync(Manager);
        }
        
        public int CountUnhandledCriticalAlarms() {
            return base.Channel.CountUnhandledCriticalAlarms();
        }
        
        public System.Threading.Tasks.Task<int> CountUnhandledCriticalAlarmsAsync() {
            return base.Channel.CountUnhandledCriticalAlarmsAsync();
        }
        
        public bool UpdateAlarmPanelIndicator(int Status, int Recordnr) {
            return base.Channel.UpdateAlarmPanelIndicator(Status, Recordnr);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAlarmPanelIndicatorAsync(int Status, int Recordnr) {
            return base.Channel.UpdateAlarmPanelIndicatorAsync(Status, Recordnr);
        }
        
        public bool SortMatrix(int CID) {
            return base.Channel.SortMatrix(CID);
        }
        
        public System.Threading.Tasks.Task<bool> SortMatrixAsync(int CID) {
            return base.Channel.SortMatrixAsync(CID);
        }
        
        public System.Data.DataSet GetCrossTableRow(int CID, int Row) {
            return base.Channel.GetCrossTableRow(CID, Row);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCrossTableRowAsync(int CID, int Row) {
            return base.Channel.GetCrossTableRowAsync(CID, Row);
        }
        
        public bool IPEntryDenied(string IPNumber, bool IsCrawler) {
            return base.Channel.IPEntryDenied(IPNumber, IsCrawler);
        }
        
        public System.Threading.Tasks.Task<bool> IPEntryDeniedAsync(string IPNumber, bool IsCrawler) {
            return base.Channel.IPEntryDeniedAsync(IPNumber, IsCrawler);
        }
        
        public void WriteLogExceptionTrace(string User, int CID, string Module, string Level, int LevelValue, string TraceLog) {
            base.Channel.WriteLogExceptionTrace(User, CID, Module, Level, LevelValue, TraceLog);
        }
        
        public System.Threading.Tasks.Task WriteLogExceptionTraceAsync(string User, int CID, string Module, string Level, int LevelValue, string TraceLog) {
            return base.Channel.WriteLogExceptionTraceAsync(User, CID, Module, Level, LevelValue, TraceLog);
        }
        
        public int GetCGTournamentIdFrom(int CID) {
            return base.Channel.GetCGTournamentIdFrom(CID);
        }
        
        public System.Threading.Tasks.Task<int> GetCGTournamentIdFromAsync(int CID) {
            return base.Channel.GetCGTournamentIdFromAsync(CID);
        }
        
        public System.Data.DataSet List_Free_Round_Players(int CID, int RNR) {
            return base.Channel.List_Free_Round_Players(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> List_Free_Round_PlayersAsync(int CID, int RNR) {
            return base.Channel.List_Free_Round_PlayersAsync(CID, RNR);
        }
        
        public void RemovePlayerStatusCalculated(int CID, int RNR) {
            base.Channel.RemovePlayerStatusCalculated(CID, RNR);
        }
        
        public System.Threading.Tasks.Task RemovePlayerStatusCalculatedAsync(int CID, int RNR) {
            return base.Channel.RemovePlayerStatusCalculatedAsync(CID, RNR);
        }
        
        public void Update_Free_Round_Date(int PID) {
            base.Channel.Update_Free_Round_Date(PID);
        }
        
        public System.Threading.Tasks.Task Update_Free_Round_DateAsync(int PID) {
            return base.Channel.Update_Free_Round_DateAsync(PID);
        }
        
        public bool UpdateMobileMessageIndicator(int Status, int Recordnr) {
            return base.Channel.UpdateMobileMessageIndicator(Status, Recordnr);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMobileMessageIndicatorAsync(int Status, int Recordnr) {
            return base.Channel.UpdateMobileMessageIndicatorAsync(Status, Recordnr);
        }
        
        public System.Data.DataSet GetMobileMessageData(int CID) {
            return base.Channel.GetMobileMessageData(CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMobileMessageDataAsync(int CID) {
            return base.Channel.GetMobileMessageDataAsync(CID);
        }
        
        public int CountUnhandledMobileMessages(int CID) {
            return base.Channel.CountUnhandledMobileMessages(CID);
        }
        
        public System.Threading.Tasks.Task<int> CountUnhandledMobileMessagesAsync(int CID) {
            return base.Channel.CountUnhandledMobileMessagesAsync(CID);
        }
        
        public TSGS_CS_Login_Client.TSGS_CS_WCF_Service.CompetitionManager GetCompetitionManager(string CompetitionManagerName) {
            return base.Channel.GetCompetitionManager(CompetitionManagerName);
        }
        
        public System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.CompetitionManager> GetCompetitionManagerAsync(string CompetitionManagerName) {
            return base.Channel.GetCompetitionManagerAsync(CompetitionManagerName);
        }
        
        public void SaveCompetitionManager(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.CompetitionManager CompetitionManager) {
            base.Channel.SaveCompetitionManager(CompetitionManager);
        }
        
        public System.Threading.Tasks.Task SaveCompetitionManagerAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.CompetitionManager CompetitionManager) {
            return base.Channel.SaveCompetitionManagerAsync(CompetitionManager);
        }
        
        public System.Data.DataSet GetCompetitionList(string CompetitionManagerName, int Manager_Id) {
            return base.Channel.GetCompetitionList(CompetitionManagerName, Manager_Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompetitionListAsync(string CompetitionManagerName, int Manager_Id) {
            return base.Channel.GetCompetitionListAsync(CompetitionManagerName, Manager_Id);
        }
        
        public int GetRoundNumber(int CompetitieId) {
            return base.Channel.GetRoundNumber(CompetitieId);
        }
        
        public System.Threading.Tasks.Task<int> GetRoundNumberAsync(int CompetitieId) {
            return base.Channel.GetRoundNumberAsync(CompetitieId);
        }
        
        public System.Data.DataSet GetWorkFlowRecord(int CompetitionManagerId, int RoundNumber) {
            return base.Channel.GetWorkFlowRecord(CompetitionManagerId, RoundNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetWorkFlowRecordAsync(int CompetitionManagerId, int RoundNumber) {
            return base.Channel.GetWorkFlowRecordAsync(CompetitionManagerId, RoundNumber);
        }
        
        public int GetNumberWithdrawn(int CompetitieId) {
            return base.Channel.GetNumberWithdrawn(CompetitieId);
        }
        
        public System.Threading.Tasks.Task<int> GetNumberWithdrawnAsync(int CompetitieId) {
            return base.Channel.GetNumberWithdrawnAsync(CompetitieId);
        }
        
        public int GetNumberExternal(int CID, int RNR) {
            return base.Channel.GetNumberExternal(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<int> GetNumberExternalAsync(int CID, int RNR) {
            return base.Channel.GetNumberExternalAsync(CID, RNR);
        }
        
        public int GetNumberAbsentees(int CID, int RNR) {
            return base.Channel.GetNumberAbsentees(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<int> GetNumberAbsenteesAsync(int CID, int RNR) {
            return base.Channel.GetNumberAbsenteesAsync(CID, RNR);
        }
        
        public int GetNumberTotal(int CID) {
            return base.Channel.GetNumberTotal(CID);
        }
        
        public System.Threading.Tasks.Task<int> GetNumberTotalAsync(int CID) {
            return base.Channel.GetNumberTotalAsync(CID);
        }
        
        public System.Data.DataSet GetPlayerList(int CompetitionId) {
            return base.Channel.GetPlayerList(CompetitionId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPlayerListAsync(int CompetitionId) {
            return base.Channel.GetPlayerListAsync(CompetitionId);
        }
        
        public System.Data.DataSet GetAllAdversariesStatistics(int PID) {
            return base.Channel.GetAllAdversariesStatistics(PID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllAdversariesStatisticsAsync(int PID) {
            return base.Channel.GetAllAdversariesStatisticsAsync(PID);
        }
        
        public System.Data.DataSet GetAbsenteeRegisterList(int CompetitionId, int RoundNumber) {
            return base.Channel.GetAbsenteeRegisterList(CompetitionId, RoundNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAbsenteeRegisterListAsync(int CompetitionId, int RoundNumber) {
            return base.Channel.GetAbsenteeRegisterListAsync(CompetitionId, RoundNumber);
        }
        
        public System.Data.DataSet GetAbsenteeList(int CompetitionId, int RoundNumber) {
            return base.Channel.GetAbsenteeList(CompetitionId, RoundNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAbsenteeListAsync(int CompetitionId, int RoundNumber) {
            return base.Channel.GetAbsenteeListAsync(CompetitionId, RoundNumber);
        }
        
        public string GetPlayerName(int PID) {
            return base.Channel.GetPlayerName(PID);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerNameAsync(int PID) {
            return base.Channel.GetPlayerNameAsync(PID);
        }
        
        public string GetPlayerFirstName(int PID) {
            return base.Channel.GetPlayerFirstName(PID);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerFirstNameAsync(int PID) {
            return base.Channel.GetPlayerFirstNameAsync(PID);
        }
        
        public bool AddAbsentee(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.AbsenteeData Absentee) {
            return base.Channel.AddAbsentee(Absentee);
        }
        
        public System.Threading.Tasks.Task<bool> AddAbsenteeAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.AbsenteeData Absentee) {
            return base.Channel.AddAbsenteeAsync(Absentee);
        }
        
        public bool DeleteAbsentees(int CompetitieID, int RondeNummer) {
            return base.Channel.DeleteAbsentees(CompetitieID, RondeNummer);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAbsenteesAsync(int CompetitieID, int RondeNummer) {
            return base.Channel.DeleteAbsenteesAsync(CompetitieID, RondeNummer);
        }
        
        public bool Update_Workflow_Item(string Item_Name, int CID, int RNR, int Item_Value) {
            return base.Channel.Update_Workflow_Item(Item_Name, CID, RNR, Item_Value);
        }
        
        public System.Threading.Tasks.Task<bool> Update_Workflow_ItemAsync(string Item_Name, int CID, int RNR, int Item_Value) {
            return base.Channel.Update_Workflow_ItemAsync(Item_Name, CID, RNR, Item_Value);
        }
        
        public int GetNoPlayCode(int PID, int CID, int RNR) {
            return base.Channel.GetNoPlayCode(PID, CID, RNR);
        }
        
        public System.Threading.Tasks.Task<int> GetNoPlayCodeAsync(int PID, int CID, int RNR) {
            return base.Channel.GetNoPlayCodeAsync(PID, CID, RNR);
        }
        
        public System.Data.DataSet GetKNSBPlayerList(string Playername) {
            return base.Channel.GetKNSBPlayerList(Playername);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetKNSBPlayerListAsync(string Playername) {
            return base.Channel.GetKNSBPlayerListAsync(Playername);
        }
        
        public System.Data.DataSet GetFIDEPlayerList(string Playername) {
            return base.Channel.GetFIDEPlayerList(Playername);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFIDEPlayerListAsync(string Playername) {
            return base.Channel.GetFIDEPlayerListAsync(Playername);
        }
        
        public bool AddPlayer(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData Player) {
            return base.Channel.AddPlayer(Player);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlayerAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData Player) {
            return base.Channel.AddPlayerAsync(Player);
        }
        
        public TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData GetPlayerFullData(int Player, int CID) {
            return base.Channel.GetPlayerFullData(Player, CID);
        }
        
        public System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData> GetPlayerFullDataAsync(int Player, int CID) {
            return base.Channel.GetPlayerFullDataAsync(Player, CID);
        }
        
        public bool UpdatePlayer(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData Player, int CID) {
            return base.Channel.UpdatePlayer(Player, CID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.PlayerBasicData Player, int CID) {
            return base.Channel.UpdatePlayerAsync(Player, CID);
        }
        
        public bool Initialize_New_Round(int CID, int RNR) {
            return base.Channel.Initialize_New_Round(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<bool> Initialize_New_RoundAsync(int CID, int RNR) {
            return base.Channel.Initialize_New_RoundAsync(CID, RNR);
        }
        
        public bool Calculate_New_Pairing(int CID, int RNR) {
            return base.Channel.Calculate_New_Pairing(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<bool> Calculate_New_PairingAsync(int CID, int RNR) {
            return base.Channel.Calculate_New_PairingAsync(CID, RNR);
        }
        
        public float GetPlayerStartCompetitionPoints(int PID, int CID) {
            return base.Channel.GetPlayerStartCompetitionPoints(PID, CID);
        }
        
        public System.Threading.Tasks.Task<float> GetPlayerStartCompetitionPointsAsync(int PID, int CID) {
            return base.Channel.GetPlayerStartCompetitionPointsAsync(PID, CID);
        }
        
        public float GetPlayerStartRating(int PID, int CID) {
            return base.Channel.GetPlayerStartRating(PID, CID);
        }
        
        public System.Threading.Tasks.Task<float> GetPlayerStartRatingAsync(int PID, int CID) {
            return base.Channel.GetPlayerStartRatingAsync(PID, CID);
        }
        
        public float GetPlayerRatingInCompetition(int PID, int RNR, int CID) {
            return base.Channel.GetPlayerRatingInCompetition(PID, RNR, CID);
        }
        
        public System.Threading.Tasks.Task<float> GetPlayerRatingInCompetitionAsync(int PID, int RNR, int CID) {
            return base.Channel.GetPlayerRatingInCompetitionAsync(PID, RNR, CID);
        }
        
        public float GetPlayerPointsInCompetition(int PID, int RNR, int CID) {
            return base.Channel.GetPlayerPointsInCompetition(PID, RNR, CID);
        }
        
        public System.Threading.Tasks.Task<float> GetPlayerPointsInCompetitionAsync(int PID, int RNR, int CID) {
            return base.Channel.GetPlayerPointsInCompetitionAsync(PID, RNR, CID);
        }
        
        public void Create_Worklist(int CID, int RNR) {
            base.Channel.Create_Worklist(CID, RNR);
        }
        
        public System.Threading.Tasks.Task Create_WorklistAsync(int CID, int RNR) {
            return base.Channel.Create_WorklistAsync(CID, RNR);
        }
        
        public int GetKroongroepPartijNummer(int PID, int CID, int RNR) {
            return base.Channel.GetKroongroepPartijNummer(PID, CID, RNR);
        }
        
        public System.Threading.Tasks.Task<int> GetKroongroepPartijNummerAsync(int PID, int CID, int RNR) {
            return base.Channel.GetKroongroepPartijNummerAsync(PID, CID, RNR);
        }
        
        public System.Data.DataSet GetGameList(int CID, int RNR, int GameType, int Language) {
            return base.Channel.GetGameList(CID, RNR, GameType, Language);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetGameListAsync(int CID, int RNR, int GameType, int Language) {
            return base.Channel.GetGameListAsync(CID, RNR, GameType, Language);
        }
        
        public string GetStringFromAlgemeneInfo(int CID, string AttributeName) {
            return base.Channel.GetStringFromAlgemeneInfo(CID, AttributeName);
        }
        
        public System.Threading.Tasks.Task<string> GetStringFromAlgemeneInfoAsync(int CID, string AttributeName) {
            return base.Channel.GetStringFromAlgemeneInfoAsync(CID, AttributeName);
        }
        
        public string FTP_Basis_Upload_File(string Display_Target, string App_Source, int CID, string File_Name) {
            return base.Channel.FTP_Basis_Upload_File(Display_Target, App_Source, CID, File_Name);
        }
        
        public System.Threading.Tasks.Task<string> FTP_Basis_Upload_FileAsync(string Display_Target, string App_Source, int CID, string File_Name) {
            return base.Channel.FTP_Basis_Upload_FileAsync(Display_Target, App_Source, CID, File_Name);
        }
        
        public System.Data.DataSet GetMailAddresses(int CID) {
            return base.Channel.GetMailAddresses(CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMailAddressesAsync(int CID) {
            return base.Channel.GetMailAddressesAsync(CID);
        }
        
        public System.Data.DataSet GetOneGame(int PID, int CID, int RNR) {
            return base.Channel.GetOneGame(PID, CID, RNR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOneGameAsync(int PID, int CID, int RNR) {
            return base.Channel.GetOneGameAsync(PID, CID, RNR);
        }
        
        public System.Data.DataSet GetGamesUpdateList(int CID, int RNR) {
            return base.Channel.GetGamesUpdateList(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetGamesUpdateListAsync(int CID, int RNR) {
            return base.Channel.GetGamesUpdateListAsync(CID, RNR);
        }
        
        public void AddManualGame(int PIDWhite, int PIDBlack, int CID, int RNR, int ChampionsgroupGame) {
            base.Channel.AddManualGame(PIDWhite, PIDBlack, CID, RNR, ChampionsgroupGame);
        }
        
        public System.Threading.Tasks.Task AddManualGameAsync(int PIDWhite, int PIDBlack, int CID, int RNR, int ChampionsgroupGame) {
            return base.Channel.AddManualGameAsync(PIDWhite, PIDBlack, CID, RNR, ChampionsgroupGame);
        }
        
        public void Remove_Games_From_List(int PIDWhite, int PIDBlack, int CID, int RNR) {
            base.Channel.Remove_Games_From_List(PIDWhite, PIDBlack, CID, RNR);
        }
        
        public System.Threading.Tasks.Task Remove_Games_From_ListAsync(int PIDWhite, int PIDBlack, int CID, int RNR) {
            return base.Channel.Remove_Games_From_ListAsync(PIDWhite, PIDBlack, CID, RNR);
        }
        
        public bool IsPlayerInChampiongroup(int PID) {
            return base.Channel.IsPlayerInChampiongroup(PID);
        }
        
        public System.Threading.Tasks.Task<bool> IsPlayerInChampiongroupAsync(int PID) {
            return base.Channel.IsPlayerInChampiongroupAsync(PID);
        }
        
        public System.Data.DataSet GetResultsGameList(int CID, int RNR) {
            return base.Channel.GetResultsGameList(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetResultsGameListAsync(int CID, int RNR) {
            return base.Channel.GetResultsGameListAsync(CID, RNR);
        }
        
        public bool UpdateResult(int PID_White, int PID_Black, int CID, int RNR, int auxR) {
            return base.Channel.UpdateResult(PID_White, PID_Black, CID, RNR, auxR);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateResultAsync(int PID_White, int PID_Black, int CID, int RNR, int auxR) {
            return base.Channel.UpdateResultAsync(PID_White, PID_Black, CID, RNR, auxR);
        }
        
        public bool AllResultsEntered(int CID, int RNR) {
            return base.Channel.AllResultsEntered(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<bool> AllResultsEnteredAsync(int CID, int RNR) {
            return base.Channel.AllResultsEnteredAsync(CID, RNR);
        }
        
        public bool DeleteResults(int CompetitieID, int RondeNummer) {
            return base.Channel.DeleteResults(CompetitieID, RondeNummer);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteResultsAsync(int CompetitieID, int RondeNummer) {
            return base.Channel.DeleteResultsAsync(CompetitieID, RondeNummer);
        }
        
        public void Create_Result_Records(int CID, int RNR) {
            base.Channel.Create_Result_Records(CID, RNR);
        }
        
        public System.Threading.Tasks.Task Create_Result_RecordsAsync(int CID, int RNR) {
            return base.Channel.Create_Result_RecordsAsync(CID, RNR);
        }
        
        public void AdministrationRatingData(int CID, int RNR) {
            base.Channel.AdministrationRatingData(CID, RNR);
        }
        
        public System.Threading.Tasks.Task AdministrationRatingDataAsync(int CID, int RNR) {
            return base.Channel.AdministrationRatingDataAsync(CID, RNR);
        }
        
        public bool Remove_Templist(int CID, int RNR) {
            return base.Channel.Remove_Templist(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<bool> Remove_TemplistAsync(int CID, int RNR) {
            return base.Channel.Remove_TemplistAsync(CID, RNR);
        }
        
        public System.Data.DataSet GetCompetitionRankingList(int CID, int RNR) {
            return base.Channel.GetCompetitionRankingList(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompetitionRankingListAsync(int CID, int RNR) {
            return base.Channel.GetCompetitionRankingListAsync(CID, RNR);
        }
        
        public int GetMaxRounds(int CID) {
            return base.Channel.GetMaxRounds(CID);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxRoundsAsync(int CID) {
            return base.Channel.GetMaxRoundsAsync(CID);
        }
        
        public int Count_Player_Absent(int PID, int CID, int RNR) {
            return base.Channel.Count_Player_Absent(PID, CID, RNR);
        }
        
        public System.Threading.Tasks.Task<int> Count_Player_AbsentAsync(int PID, int CID, int RNR) {
            return base.Channel.Count_Player_AbsentAsync(PID, CID, RNR);
        }
        
        public System.Data.DataSet GetCompetitionGainRankingList(int CID, int RNR) {
            return base.Channel.GetCompetitionGainRankingList(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompetitionGainRankingListAsync(int CID, int RNR) {
            return base.Channel.GetCompetitionGainRankingListAsync(CID, RNR);
        }
        
        public System.Data.DataSet GetELORankingList(int CID, int RNR) {
            return base.Channel.GetELORankingList(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetELORankingListAsync(int CID, int RNR) {
            return base.Channel.GetELORankingListAsync(CID, RNR);
        }
        
        public int ButtonAllowed(string FunctionDescription, int Status, int Privileges) {
            return base.Channel.ButtonAllowed(FunctionDescription, Status, Privileges);
        }
        
        public System.Threading.Tasks.Task<int> ButtonAllowedAsync(string FunctionDescription, int Status, int Privileges) {
            return base.Channel.ButtonAllowedAsync(FunctionDescription, Status, Privileges);
        }
        
        public int GetIntFromAlgemeneInfo(int CID, string AttributeName) {
            return base.Channel.GetIntFromAlgemeneInfo(CID, AttributeName);
        }
        
        public System.Threading.Tasks.Task<int> GetIntFromAlgemeneInfoAsync(int CID, string AttributeName) {
            return base.Channel.GetIntFromAlgemeneInfoAsync(CID, AttributeName);
        }
        
        public void SetIntInAlgemeneInfo(string Item_Name, int CID, int Item_Value) {
            base.Channel.SetIntInAlgemeneInfo(Item_Name, CID, Item_Value);
        }
        
        public System.Threading.Tasks.Task SetIntInAlgemeneInfoAsync(string Item_Name, int CID, int Item_Value) {
            return base.Channel.SetIntInAlgemeneInfoAsync(Item_Name, CID, Item_Value);
        }
        
        public System.Data.DataSet GetPlayerListAlphabetical(int CID) {
            return base.Channel.GetPlayerListAlphabetical(CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPlayerListAlphabeticalAsync(int CID) {
            return base.Channel.GetPlayerListAlphabeticalAsync(CID);
        }
        
        public System.Data.DataSet GetResults(int PID, int CID, int TC) {
            return base.Channel.GetResults(PID, CID, TC);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetResultsAsync(int PID, int CID, int TC) {
            return base.Channel.GetResultsAsync(PID, CID, TC);
        }
        
        public bool UpdateOneResult(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ResultData OneResult) {
            return base.Channel.UpdateOneResult(OneResult);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOneResultAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ResultData OneResult) {
            return base.Channel.UpdateOneResultAsync(OneResult);
        }
        
        public TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GeneralInfo GetGeneralInfo(int CID) {
            return base.Channel.GetGeneralInfo(CID);
        }
        
        public System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GeneralInfo> GetGeneralInfoAsync(int CID) {
            return base.Channel.GetGeneralInfoAsync(CID);
        }
        
        public int UpdateGeneralInfo(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GeneralInfo gi, int ManagerId) {
            return base.Channel.UpdateGeneralInfo(gi, ManagerId);
        }
        
        public System.Threading.Tasks.Task<int> UpdateGeneralInfoAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.GeneralInfo gi, int ManagerId) {
            return base.Channel.UpdateGeneralInfoAsync(gi, ManagerId);
        }
        
        public TSGS_CS_Login_Client.TSGS_CS_WCF_Service.General_Swiss_Info GetGeneralSwissInfo(int CID) {
            return base.Channel.GetGeneralSwissInfo(CID);
        }
        
        public System.Threading.Tasks.Task<TSGS_CS_Login_Client.TSGS_CS_WCF_Service.General_Swiss_Info> GetGeneralSwissInfoAsync(int CID) {
            return base.Channel.GetGeneralSwissInfoAsync(CID);
        }
        
        public int UpdateGeneralSwissInfo(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.General_Swiss_Info gi, int ManagerId) {
            return base.Channel.UpdateGeneralSwissInfo(gi, ManagerId);
        }
        
        public System.Threading.Tasks.Task<int> UpdateGeneralSwissInfoAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.General_Swiss_Info gi, int ManagerId) {
            return base.Channel.UpdateGeneralSwissInfoAsync(gi, ManagerId);
        }
        
        public bool DeleteDeelnemerCompetitieRecords(int CID, int CIDOld) {
            return base.Channel.DeleteDeelnemerCompetitieRecords(CID, CIDOld);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDeelnemerCompetitieRecordsAsync(int CID, int CIDOld) {
            return base.Channel.DeleteDeelnemerCompetitieRecordsAsync(CID, CIDOld);
        }
        
        public bool AddPlayerCompetitionRecord(int CID, int PID, float CPS, float ELO, int COT) {
            return base.Channel.AddPlayerCompetitionRecord(CID, PID, CPS, ELO, COT);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlayerCompetitionRecordAsync(int CID, int PID, float CPS, float ELO, int COT) {
            return base.Channel.AddPlayerCompetitionRecordAsync(CID, PID, CPS, ELO, COT);
        }
        
        public bool UpdatePlayerTeam(int PID, int Team, string Association_ID) {
            return base.Channel.UpdatePlayerTeam(PID, Team, Association_ID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerTeamAsync(int PID, int Team, string Association_ID) {
            return base.Channel.UpdatePlayerTeamAsync(PID, Team, Association_ID);
        }
        
        public System.Data.DataSet GetChampionsgroupPlayerList(int CID) {
            return base.Channel.GetChampionsgroupPlayerList(CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetChampionsgroupPlayerListAsync(int CID) {
            return base.Channel.GetChampionsgroupPlayerListAsync(CID);
        }
        
        public bool UpdateChampionsGroupPlayer(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ChampionsgroupData OnePlayer) {
            return base.Channel.UpdateChampionsGroupPlayer(OnePlayer);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateChampionsGroupPlayerAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.ChampionsgroupData OnePlayer) {
            return base.Channel.UpdateChampionsGroupPlayerAsync(OnePlayer);
        }
        
        public bool AddPlayerRoundRobinRecord(int CID, int RNR, int GNR, int PID, int ADV, int COL) {
            return base.Channel.AddPlayerRoundRobinRecord(CID, RNR, GNR, PID, ADV, COL);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlayerRoundRobinRecordAsync(int CID, int RNR, int GNR, int PID, int ADV, int COL) {
            return base.Channel.AddPlayerRoundRobinRecordAsync(CID, RNR, GNR, PID, ADV, COL);
        }
        
        public bool Remove_RoundRobin(int CID) {
            return base.Channel.Remove_RoundRobin(CID);
        }
        
        public System.Threading.Tasks.Task<bool> Remove_RoundRobinAsync(int CID) {
            return base.Channel.Remove_RoundRobinAsync(CID);
        }
        
        public void Upgrade_ChampionsgroupPoints(int CID) {
            base.Channel.Upgrade_ChampionsgroupPoints(CID);
        }
        
        public System.Threading.Tasks.Task Upgrade_ChampionsgroupPointsAsync(int CID) {
            return base.Channel.Upgrade_ChampionsgroupPointsAsync(CID);
        }
        
        public System.Data.DataSet GetRoundRobinData(int CID) {
            return base.Channel.GetRoundRobinData(CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRoundRobinDataAsync(int CID) {
            return base.Channel.GetRoundRobinDataAsync(CID);
        }
        
        public float GetChampionsgroupMatchpoint(int PID, int ADV, int CID) {
            return base.Channel.GetChampionsgroupMatchpoint(PID, ADV, CID);
        }
        
        public System.Threading.Tasks.Task<float> GetChampionsgroupMatchpointAsync(int PID, int ADV, int CID) {
            return base.Channel.GetChampionsgroupMatchpointAsync(PID, ADV, CID);
        }
        
        public System.Data.DataSet GetAllOtherPlayersAlphabetical(int CID) {
            return base.Channel.GetAllOtherPlayersAlphabetical(CID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllOtherPlayersAlphabeticalAsync(int CID) {
            return base.Channel.GetAllOtherPlayersAlphabeticalAsync(CID);
        }
        
        public void Remove_Player_From_CompetitionRating(int PID, int CID) {
            base.Channel.Remove_Player_From_CompetitionRating(PID, CID);
        }
        
        public System.Threading.Tasks.Task Remove_Player_From_CompetitionRatingAsync(int PID, int CID) {
            return base.Channel.Remove_Player_From_CompetitionRatingAsync(PID, CID);
        }
        
        public float GetClubRating(int PID) {
            return base.Channel.GetClubRating(PID);
        }
        
        public System.Threading.Tasks.Task<float> GetClubRatingAsync(int PID) {
            return base.Channel.GetClubRatingAsync(PID);
        }
        
        public float GetKNSBRating(int PID) {
            return base.Channel.GetKNSBRating(PID);
        }
        
        public System.Threading.Tasks.Task<float> GetKNSBRatingAsync(int PID) {
            return base.Channel.GetKNSBRatingAsync(PID);
        }
        
        public float GetFIDERating(int PID) {
            return base.Channel.GetFIDERating(PID);
        }
        
        public System.Threading.Tasks.Task<float> GetFIDERatingAsync(int PID) {
            return base.Channel.GetFIDERatingAsync(PID);
        }
        
        public float GetCompetitionPoints(int PID) {
            return base.Channel.GetCompetitionPoints(PID);
        }
        
        public System.Threading.Tasks.Task<float> GetCompetitionPointsAsync(int PID) {
            return base.Channel.GetCompetitionPointsAsync(PID);
        }
        
        public void WriteLogLine(string User, int CID, string Module, string Level, int LevelValue, string LogLine) {
            base.Channel.WriteLogLine(User, CID, Module, Level, LevelValue, LogLine);
        }
        
        public System.Threading.Tasks.Task WriteLogLineAsync(string User, int CID, string Module, string Level, int LevelValue, string LogLine) {
            return base.Channel.WriteLogLineAsync(User, CID, Module, Level, LevelValue, LogLine);
        }
        
        public bool PlayerHasResults(int CID, int PID) {
            return base.Channel.PlayerHasResults(CID, PID);
        }
        
        public System.Threading.Tasks.Task<bool> PlayerHasResultsAsync(int CID, int PID) {
            return base.Channel.PlayerHasResultsAsync(CID, PID);
        }
        
        public bool DeletePlayerCompetitionRecord(int CID, int PID) {
            return base.Channel.DeletePlayerCompetitionRecord(CID, PID);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlayerCompetitionRecordAsync(int CID, int PID) {
            return base.Channel.DeletePlayerCompetitionRecordAsync(CID, PID);
        }
        
        public bool Remove_BlitzResults(int CID, int RNR) {
            return base.Channel.Remove_BlitzResults(CID, RNR);
        }
        
        public System.Threading.Tasks.Task<bool> Remove_BlitzResultsAsync(int CID, int RNR) {
            return base.Channel.Remove_BlitzResultsAsync(CID, RNR);
        }
        
        public bool AddPlayerBlitzResultInit(int CID, int RNR, int PID) {
            return base.Channel.AddPlayerBlitzResultInit(CID, RNR, PID);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlayerBlitzResultInitAsync(int CID, int RNR, int PID) {
            return base.Channel.AddPlayerBlitzResultInitAsync(CID, RNR, PID);
        }
        
        public bool UpdateOneBlitzResult(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.BlitzResultData OneBlitzResult) {
            return base.Channel.UpdateOneBlitzResult(OneBlitzResult);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOneBlitzResultAsync(TSGS_CS_Login_Client.TSGS_CS_WCF_Service.BlitzResultData OneBlitzResult) {
            return base.Channel.UpdateOneBlitzResultAsync(OneBlitzResult);
        }
    }
}
